{
	"info": {
		"_postman_id": "968ee18e-be4c-47ad-8733-58344664946f",
		"name": "Volante API Service-Data Driven",
		"description": "This document has information about the APIs that are available for the Volante API Service.\n\nThe OpenAPI (Swagger) Specification, which is a specification for machine-readable interface files for describing, producing, consuming, and visualizing RESTful web services, is available in the following locations:\n\nRAML : https://<domain>:<port>/volanteapis/messaging/api.raml\n\nOpenAPI : https://<domain>:<port>/volanteapis/messaging/swagger.json\n\n## Login and Authentication\n\nThe first step is to login and receive a session token from the server. Once the session token is received, it's valid for 1 hour (60 minutes). Every REST call should pass this token. Unauthorized requests will be filtered/rejected. On every request, session expiration time will be extended. The updated expiration time will be CurrentTime (time at which the user makes a request) + Offset time (session timeout minutes i.e. 60 mins). If user is inactive (didn't make any request), after 60 minutes the session will expire.\n\nWhen the user logs in, a session is created for the user and a token is associated with this session. All subsequent REST calls, require that this token is passed back to the server. The server validates the existence or the session (based on the token and also based on the session timeout) and lets the call go through. To summarize,\n\n* Only the create user and login REST calls can be made without an existing session.\n* All REST calls (except the login/signup) require a token to be passed as part the HTTP header which is validated against the existing user sessions.\n* Session Token gets invalidated on time-out.\n* If userId/password or Session Token are invalid, then '401' is returned as a response code\n\nThe content of the Auth-Header for all API calls other than login should look like this: Bearer <token>\n\n## General Information\n\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "v2",
			"item": [
				{
					"name": "auth",
					"item": [
						{
							"name": "Login User",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db665ec0-df4d-4099-8a3d-57051558d5f1",
										"exec": [
											"const responseJson=pm.response.json();\r",
											"// Below test cases will test the response code should be any one of the allowed response code. If not matched, reports error\r",
											"pm.test(\"Status validated successfully and got \"+pm.response.code, function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,500,401])\r",
											"});\r",
											"\r",
											"if (pm.response.code==200){\r",
											"    //Following test cases will be executed only if status code was 200\r",
											"    //Below line will set the acces token to the collection variable\r",
											"    //pm.collectionVariables.set(\"accessToken\",responseJson.accessToken);\r",
											"    pm.environment.set(\"accessToken\", responseJson.accessToken);\r",
											"    //Below testcase will verif whether the Token type was bearer or not\r",
											"    pm.test(\"Token type should be \\\"bearer\\\"\", function(){\r",
											"        pm.expect(responseJson.tokenType).to.eqls(\"Bearer\");\r",
											"    });\r",
											"    //Below testcase will validate the length of the token generated\r",
											"    pm.test(\"Access Token length was 32\",function(){\r",
											"        pm.expect(responseJson.accessToken).to.have.length(32);\r",
											"    });\r",
											"    //Below testcase will validate the RegEx pattern of the token generated\r",
											"    pm.test(\"Access token pattern match test\", function(){\r",
											"        pm.expect(responseJson.accessToken).to.match(/[A-Za-z0-9]{32}/);\r",
											"    })\r",
											"    //Below testcase will validate the schema of the response\r",
											"    \r",
											"\tconst schema={\r",
											"\t\t\"accessToken\":{\r",
											"\t\t\t\"type\":\"String\"\r",
											"\t\t},\r",
											"\t\t\"expirationDate\":{\r",
											"\t\t\t\"type\":\"String\"\r",
											"\t\t},\r",
											"\t\t\"tokenType\":{\r",
											"\t\t\t\"type\":\"String\"\r",
											"\t\t},\r",
											"\t\t\"required\":[\r",
											"\t\t\t\"accessToken\",\r",
											"\t\t\t\"expirationDate\",\r",
											"\t\t\t\"tokenType\"\r",
											"\t\t]\r",
											"\t};\r",
											"\tpm.test(\"schema test passed\", function(){\r",
											"\t\tpm.response.to.have.jsonSchema(schema);\r",
											"\t});\r",
											"}else if(pm.response.code==401){\r",
											"    //Following test cases will be executed only if status code was 200\r",
											"    //Below test case validates the success flag value equals to \"false\" or not\r",
											"    pm.test(\"Code should be \\\"HTTP-401\\\"\", function(){\r",
											"        pm.expect(responseJson.errors[0].code).to.eqls(\"HTTP-401\");\r",
											"    });\r",
											"    pm.test(\"success should be \\\"false\\\"\", function(){\r",
											"        pm.expect(responseJson.success).to.eqls(false);\r",
											"    });\r",
											"    pm.test(\"Message matched successfully\",function(){\r",
											"        pm.expect(responseJson.errors[0].message).to.eqls(\"Unauthorized. Invalid Username or Password! Please try again.\");\r",
											"    })\r",
											"    pm.test(\"Severity should be \\\"error\\\"\", function(){\r",
											"        pm.expect(responseJson.errors[0].severity).to.eqls(\"error\");\r",
											"    });\r",
											"    //Below test case validates the severity matches with allowed values\r",
											"    pm.test(\"Error severity matches with expected values\", function () {\r",
											"        pm.expect(responseJson.errors[0].severity).to.be.oneOf([\"fatal\",\"error\",\"warn\"])\r",
											"    });\r",
											"    //Below tescase validates the schema/ Data type of the response fields\r",
											"    const schema={\r",
											"        \"success\":{\r",
											"            \"type\":\"Boolean\"\r",
											"        },\r",
											"        \"errors\":{\r",
											"            \"type\":\"array\",\r",
											"            \"items\":{\r",
											"                \"properties\":{\r",
											"                    \"code\":{\r",
											"                        \"type\":\"String\"\r",
											"                    },\r",
											"                    \"message\":{\r",
											"                        \"type\":\"String\"\r",
											"                    },\r",
											"                    \"severity\":{\r",
											"                        \"type\":\"String\"\r",
											"                    }\r",
											"                }\r",
											"            },\r",
											"            \"required\":[\r",
											"                \"code\",\r",
											"                \"message\",\r",
											"                \"severity\"\r",
											"            ]\r",
											"        },\r",
											"        \"required\":[\r",
											"            \"success\",\r",
											"            \"errors\"\r",
											"        ]\r",
											"    };\r",
											"    pm.test(\"schema test passed\", function(){\r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"    })    \r",
											"}else{\r",
											"    //Following test cases will be executed only if status code was 200\r",
											"    //Below test case validates the success flag value equals to \"false\" or not\r",
											"    pm.test(\"success should be \\\"false\\\"\", function(){\r",
											"        pm.expect(responseJson.success).to.eqls(false);\r",
											"    });\r",
											"    //Below test case validates the severity matches with allowed values\r",
											"    pm.test(\"Error severity matches with expected values\", function () {\r",
											"        pm.expect(responseJson.errors[0].severity).to.be.oneOf([\"fatal\",\"error\",\"warn\"])\r",
											"    });\r",
											"    //Below tescase validates the schema/ Data type of the response fields\r",
											"    pm.test(\"Schema type verification for status code 500\", function(){\r",
											"        pm.expect(responseJson.success).to.be.a(\"Boolean\");\r",
											"        pm.expect(responseJson.errors).to.be.a(\"Array\");\r",
											"        pm.expect(responseJson.errors[0].code).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].message).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].severity).to.be.a(\"String\");\r",
											"    })\r",
											"}\r",
											"//Needs to add if anyother testcases misses in the above listed cases"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "f6e9035d-4c07-4eac-83ce-15c5c1d8fcdd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userId\": \"admin\",\n  \"password\": \"admin\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/v2/auth/login",
								"description": "Validates the user's login request and provides session token on success"
							},
							"response": [
								{
									"id": "9130263a-3c53-492d-ad02-e9bef0c50cb8",
									"name": "Unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"userId\": \"<string>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/v2/auth/login"
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
								},
								{
									"id": "f594e9f6-c042-4781-8d44-f2bac1f051fe",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"userId\": \"<string>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/v2/auth/login"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"accessToken\": \"<string>\",\n  \"expirationDate\": \"<dateTime>\",\n  \"tokenType\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Change Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6a3822a-f4b5-40d0-905d-25be26b20d51",
										"exec": [
											"const responseJson=pm.response.json();\r",
											"\r",
											"pm.test(\"Status validated successfully and got \"+pm.response.code, function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,500,401])\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "ae37a613-d4c8-4468-9f2e-7443483c33b5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Accept",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"ut Lorem culpa ex nostrud\",\n  \"newPassword\": \"occaecat fugiat reprehenderit anim veniam\",\n  \"oldPassword\": \"sunt velit cupidatat enim\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/v2/auth/updatepassword",
								"description": "To change password of the user"
							},
							"response": [
								{
									"id": "1d6505e6-0d6b-4fcd-809a-bba602c53ce1",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"<string>\",\n  \"newPassword\": \"<string>\",\n  \"oldPassword\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/v2/auth/updatepassword"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"message\": \"<string>\"\n}"
								},
								{
									"id": "c8928b3a-2c83-4dce-89a0-9a179a515341",
									"name": "Unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"<string>\",\n  \"newPassword\": \"<string>\",\n  \"oldPassword\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/v2/auth/updatepassword"
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Logout User",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d86038cd-0afe-4533-89cc-5430d438d46f",
										"exec": [
											"pm.test(\"Status validated successfully and got \"+pm.response.code, function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,500,401])\r",
											"});\r",
											"const responseJson=pm.response.json();\r",
											" \r",
											"if (pm.response.code ==200){\r",
											"    pm.test(\"Schema type verification for status code 200 succeed\", function(){\r",
											"        pm.expect(responseJson.success).to.be.a(\"Boolean\");\r",
											"        pm.expect(responseJson.message).to.be.a(\"String\");\r",
											"    })\r",
											"    //User logged out successfully\r",
											"    pm.test(\"Message matched successfully\",function(){\r",
											"        pm.expect(responseJson.message).to.eqls(\"User logged out successfully\");\r",
											"    })\r",
											"    pm.test(\"success should be \\\"true\\\"\", function(){\r",
											"        pm.expect(responseJson.success).to.eqls(true);\r",
											"    });\r",
											"}else if (pm.response.code ==401){\r",
											"    pm.test(\"Code should be \\\"HTTP-401\\\"\", function(){\r",
											"        pm.expect(responseJson.errors[0].code).to.eqls(\"HTTP-401\");\r",
											"    });\r",
											"    pm.test(\"success should be \\\"false\\\"\", function(){\r",
											"        pm.expect(responseJson.success).to.eqls(false);\r",
											"    });\r",
											"    pm.test(\"Message matched successfully\",function(){\r",
											"        pm.expect(responseJson.errors[0].message).to.eqls(\"Unauthorized. Authentication failure\");\r",
											"    })\r",
											"    pm.test(\"Severity should be \\\"error\\\"\", function(){\r",
											"        pm.expect(responseJson.errors[0].severity).to.eqls(\"error\");\r",
											"    });\r",
											"     const schema={\r",
											"        \"success\":{\r",
											"            \"type\":\"Boolean\"\r",
											"        },\r",
											"        \"errors\":{\r",
											"            \"type\":\"array\",\r",
											"            \"items\":{\r",
											"                \"properties\":{\r",
											"                    \"code\":{\r",
											"                        \"type\":\"String\"\r",
											"                    },\r",
											"                    \"message\":{\r",
											"                        \"type\":\"String\"\r",
											"                    },\r",
											"                    \"severity\":{\r",
											"                        \"type\":\"String\"\r",
											"                    }\r",
											"                }\r",
											"            },\r",
											"            \"required\":[\r",
											"                \"code\",\r",
											"                \"message\",\r",
											"                \"severity\"\r",
											"            ]\r",
											"        },\r",
											"        \"required\":[\r",
											"            \"success\",\r",
											"            \"errors\"\r",
											"        ]\r",
											"    };\r",
											"    pm.test(\"schema test passed\", function(){\r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"    })\r",
											"}else{\r",
											"    // consiering default status code as 500 for this request\r",
											"    pm.test(\"success should be \\\"false\\\"\", function(){\r",
											"        pm.expect(responseJson.success).to.eqls(false);\r",
											"    });\r",
											"    pm.test(\"Schema type verification for status code 500 succeed\", function(){\r",
											"        pm.expect(responseJson.success).to.be.a(\"Boolean\");\r",
											"        pm.expect(responseJson.errors).to.be.a(\"Array\");\r",
											"        pm.expect(responseJson.errors[0].code).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].message).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].severity).to.be.a(\"String\");\r",
											"    })\r",
											"\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "c6c8fa6f-2d5d-42e8-b649-98d8a0ffce41",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"disabled": true
									}
								],
								"url": "{{baseUrl}}/v2/auth/logout",
								"description": "To terminate the current session"
							},
							"response": [
								{
									"id": "27f1629f-a515-4c6b-84cb-5bbce2d9f67e",
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/v2/auth/logout"
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
								},
								{
									"id": "38aa4e0a-5c15-4087-b420-87b2074e6001",
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/v2/auth/logout"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"message\": \"<string>\"\n}"
								},
								{
									"id": "faa6a1b9-66d3-4f8c-a32d-4cb38d5fa4f5",
									"name": "Not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/v2/auth/logout"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": ""
								}
							]
						}
					],
					"_postman_id": "112c976c-3508-4414-a92a-d65ea90a8f36",
					"_postman_isSubFolder": true
				},
				{
					"name": "construct",
					"item": [
						{
							"name": "schema",
							"item": [
								{
									"name": "Schema by Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "793c385e-652e-4e7c-b7ef-e106678d3610",
												"exec": [
													"pm.test(\"Status validated successfully and got \"+pm.response.code, function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,500,401])\r",
													"});\r",
													"const responseJson=pm.response.json();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"_postman_id": "fd94fdd4-49ed-4d30-b618-5e3253dfa2ac",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v2/construct/schema?format={{format}}&version={{version}}&name={{name}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"construct",
												"schema"
											],
											"query": [
												{
													"key": "format",
													"value": "{{format}}",
													"description": "(Required) Format of the input message. Example: SWIFT\n\nGet accepted values by calling /v2/construct/catalog"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "(Required) Version of the input message. Example: SRG 2021\n\nGet accepted values by calling /v2/construct/catalog"
												},
												{
													"key": "name",
													"value": "{{name}}",
													"description": "(Required) Name of the input message. Example: MT103\n\nGet accepted values by calling /v2/construct/catalog"
												}
											]
										},
										"description": "Returns requested message's JSON schema."
									},
									"response": [
										{
											"id": "12bae31f-5498-4c06-bed4-ad5051120348",
											"name": "Bad Request",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/construct/schema?format=<string>&version=<string>&name=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"construct",
														"schema"
													],
													"query": [
														{
															"key": "format",
															"value": "<string>"
														},
														{
															"key": "version",
															"value": "<string>"
														},
														{
															"key": "name",
															"value": "<string>"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
										},
										{
											"id": "2440677d-b94f-40a6-976f-27ccb94fc643",
											"name": "Unauthorized",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/construct/schema?format=<string>&version=<string>&name=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"construct",
														"schema"
													],
													"query": [
														{
															"key": "format",
															"value": "<string>"
														},
														{
															"key": "version",
															"value": "<string>"
														},
														{
															"key": "name",
															"value": "<string>"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
										},
										{
											"id": "645e7982-8426-4fe0-9c0f-4aebba7894b5",
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/construct/schema?format=<string>&version=<string>&name=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"construct",
														"schema"
													],
													"query": [
														{
															"key": "format",
															"value": "<string>"
														},
														{
															"key": "version",
															"value": "<string>"
														},
														{
															"key": "name",
															"value": "<string>"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
										},
										{
											"id": "d038a1b3-8310-4598-ac2a-c03dff0bfdf3",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/construct/schema?format=<string>&version=<string>&name=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"construct",
														"schema"
													],
													"query": [
														{
															"key": "format",
															"value": "<string>"
														},
														{
															"key": "version",
															"value": "<string>"
														},
														{
															"key": "name",
															"value": "<string>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": ""
										},
										{
											"id": "ede10fa2-4cd3-4f1e-ab3b-7c8c181c7da8",
											"name": "Not found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/construct/schema?format=<string>&version=<string>&name=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"construct",
														"schema"
													],
													"query": [
														{
															"key": "format",
															"value": "<string>"
														},
														{
															"key": "version",
															"value": "<string>"
														},
														{
															"key": "name",
															"value": "<string>"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": ""
										}
									]
								},
								{
									"name": "Schema as Zip",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ffb0e7c-8849-4d1a-89a2-f321c00682f4",
												"exec": [
													"pm.test(\"Status validated successfully and got \"+pm.response.code, function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,500,401])\r",
													"});\r",
													"\r",
													"const responseJson=pm.response.json();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"_postman_id": "aa10b90f-a942-4758-9c48-f2586c8bb76a",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"disabled": true
											}
										],
										"url": "{{baseUrl}}/v2/construct/schema/all",
										"description": "Returns all supported message's JSON schema as ZIP."
									},
									"response": [
										{
											"id": "23958594-eb6e-426a-94e9-58b3b160998e",
											"name": "Unauthorized",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseUrl}}/v2/construct/schema/all"
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
										},
										{
											"id": "b7134eea-0c23-41c3-bd0d-d45f7925a22b",
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseUrl}}/v2/construct/schema/all"
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
										},
										{
											"id": "c3300bfa-171c-49ff-b9c5-5320883ed172",
											"name": "Not found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseUrl}}/v2/construct/schema/all"
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": ""
										},
										{
											"id": "c41f78a4-87af-4450-9abb-cb8b24b7d7a0",
											"name": "Bad Request",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseUrl}}/v2/construct/schema/all"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
										},
										{
											"id": "fac13966-4a41-4a96-83d3-8493b41100e7",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseUrl}}/v2/construct/schema/all"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": ""
										}
									]
								}
							],
							"_postman_id": "30bd194e-b970-4dd5-b70b-68181f9d5321",
							"_postman_isSubFolder": true
						},
						{
							"name": "Constructor",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c2ff216-10fa-4995-8836-2348d0931a26",
										"exec": [
											"pm.test(\"Status validated successfully and got \"+pm.response.code, function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,500,401])\r",
											"});\r",
											"\r",
											"const responseJson=pm.response.json();\r",
											"let keys=Object.keys(responseJson);\r",
											"if (pm.response.code==200){\r",
											"    if(responseJson.success==true){\r",
											"        const schema={\r",
											"            \"success\":{\r",
											"                \"type\":\"Boolean\"\r",
											"            },\r",
											"            \"messageId\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"output\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"required\":[\r",
											"                \"success\",\r",
											"                \"messageId\"\r",
											"            ]\r",
											"           // \"additionalProperties\":false\r",
											"        };\r",
											"        pm.test(\"schema test\", function(){\r",
											"            pm.response.to.have.jsonSchema(schema);\r",
											"        });\r",
											"    }else {\r",
											"        const schema={\r",
											"            \"success\":{\r",
											"                \"type\":\"Boolean\"\r",
											"            },\r",
											"            \"messageId\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"errors\":{\r",
											"                \"type\":\"Object\",\r",
											"                \"items\":{\r",
											"                    \"type\":\"array\",\r",
											"                    \"properties\":{\r",
											"                        \"code\":{\r",
											"                            \"type\":\"String\"\r",
											"                        },\r",
											"                        \"message\":{\r",
											"                            \"type\":\"String\"\r",
											"                        },\r",
											"                        \"severity\":{\r",
											"                            \"type\":\"String\"\r",
											"                        },\r",
											"                        \"line\":{\r",
											"                            \"type\":\"integer\"\r",
											"                        },\r",
											"                        \"column\":{\r",
											"                            \"type\":\"integer\"\r",
											"                        },\r",
											"                        \"fieldId\":{\r",
											"                            \"type\":\"string\"\r",
											"                        },\r",
											"                        \"validation\":{\r",
											"                            \"type\":\"string\"\r",
											"                        }\r",
											"                    }\r",
											"                },\r",
											"                \"required\":[\r",
											"                    \"code\",\r",
											"                    \"message\",\r",
											"                    \"severity\"\r",
											"                ]\r",
											"            },\r",
											"            \"output\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"required\":[\r",
											"                \"success\",\r",
											"                \"messageId\",\r",
											"                \"errors\"\r",
											"            ]\r",
											"        };\r",
											"        pm.test(\"schema test\", function(){\r",
											"            pm.response.to.have.jsonSchema(schema);\r",
											"        });\r",
											"        pm.test(\"success should be \\\"false\\\"\", function(){\r",
											"            pm.expect(responseJson.success).to.eqls(false);\r",
											"        });\r",
											"        pm.test(\"Message ID was mandatory\",function(){\r",
											"            pm.expect(keys).to.include(\"messageId\")\r",
											"        })\r",
											"        pm.test(\"Check for errors, its mandatory\",function(){\r",
											"            pm.expect(keys).to.include(\"errors\")\r",
											"        })\r",
											"        pm.test(\"check for output\",function(){\r",
											"            pm.expect(keys).to.include(\"output\")\r",
											"            pm.expect(responseJson.output).to.be.a(\"String\")\r",
											"        })\r",
											"    }\r",
											"\r",
											"}else if (pm.response.code ==401){\r",
											"    pm.test(\"Code should be \\\"HTTP-401\\\"\", function(){\r",
											"        pm.expect(responseJson.errors[0].code).to.eqls(\"HTTP-401\");\r",
											"    });\r",
											"    pm.test(\"success should be \\\"false\\\"\", function(){\r",
											"        pm.expect(responseJson.success).to.eqls(false);\r",
											"    });\r",
											"    pm.test(\"Message matched successfully\",function(){\r",
											"        pm.expect(responseJson.errors[0].message).to.eqls(\"Unauthorized. Authentication failure\");\r",
											"    })\r",
											"    pm.test(\"Severity should be \\\"error\\\"\", function(){\r",
											"        pm.expect(responseJson.errors[0].severity).to.eqls(\"error\");\r",
											"    });\r",
											"    pm.test(\"Schema type verification for status code 401 succeed\", function(){\r",
											"        pm.expect(responseJson.success).to.be.a(\"Boolean\");\r",
											"        pm.expect(responseJson.errors).to.be.a(\"Array\");\r",
											"        pm.expect(responseJson.errors[0].code).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].message).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].severity).to.be.a(\"String\");\r",
											"    })\r",
											"}else{\r",
											"    // considering default status code as 500 for this request\r",
											"    pm.test(\"success should be \\\"false\\\"\", function(){\r",
											"        pm.expect(responseJson.success).to.eqls(false);\r",
											"    });\r",
											"    pm.test(\"Schema type verification for status code 500 succeed\", function(){\r",
											"        pm.expect(responseJson.success).to.be.a(\"Boolean\");\r",
											"        pm.expect(responseJson.errors).to.be.a(\"Array\");\r",
											"        pm.expect(responseJson.errors[0].code).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].message).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].severity).to.be.a(\"String\");\r",
											"    })\r",
											"\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "7ca67724-eba1-43d3-84a6-ed3368e8f1ae",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/plain",
										"disabled": true
									},
									{
										"key": "Accept",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{message}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v2/construct?format={{format}}&version={{version}}&name={{name}}&validations={{validations}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"construct"
									],
									"query": [
										{
											"key": "format",
											"value": "{{format}}",
											"description": "(Required) Format of the input message. Example: SWIFT\n\nGet accepted values by calling /v2/construct/catalog"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "(Required) Version of the input message. Example: SRG 2021\n\nGet accepted values by calling /v2/construct/catalog"
										},
										{
											"key": "name",
											"value": "{{name}}",
											"description": "(Required) Name of the input message. Example: MT103\n\nGet accepted values by calling /v2/construct/catalog"
										},
										{
											"key": "validations",
											"value": "{{validations}}",
											"description": "Validation nodes which needs to be executed. Value should be in a CSV format. Example: Default,Validation1\n\nGet supported validations from /v2/construct/catalog\n\nNote: If not present or value is null, the Default Validation node will be executed. If the value is empty String, then the parsed message object will not be validated."
										}
									]
								},
								"description": "Accepts the message data in JSON format and converts it to native format."
							},
							"response": [
								{
									"id": "0f12a845-3d93-48ad-a0ac-46e6b2b85ad7",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\"<string>\""
										},
										"url": {
											"raw": "{{baseUrl}}/v2/construct?format=<string>&version=<string>&name=<string>&validations=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"construct"
											],
											"query": [
												{
													"key": "format",
													"value": "<string>"
												},
												{
													"key": "version",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "validations",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"messageId\": \"<string>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\",\n      \"line\": \"<integer>\",\n      \"column\": \"<integer>\",\n      \"fieldId\": \"<string>\",\n      \"validation\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\",\n      \"line\": \"<integer>\",\n      \"column\": \"<integer>\",\n      \"fieldId\": \"<string>\",\n      \"validation\": \"<string>\"\n    }\n  ],\n  \"output\": \"<string>\"\n}"
								},
								{
									"id": "2f9813aa-a599-4f40-a200-05662d4fbac3",
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\"<string>\""
										},
										"url": {
											"raw": "{{baseUrl}}/v2/construct?format=<string>&version=<string>&name=<string>&validations=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"construct"
											],
											"query": [
												{
													"key": "format",
													"value": "<string>"
												},
												{
													"key": "version",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "validations",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
								},
								{
									"id": "4f771165-5416-4cbe-ac91-8095026edd9b",
									"name": "Unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\"<string>\""
										},
										"url": {
											"raw": "{{baseUrl}}/v2/construct?format=<string>&version=<string>&name=<string>&validations=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"construct"
											],
											"query": [
												{
													"key": "format",
													"value": "<string>"
												},
												{
													"key": "version",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "validations",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
								},
								{
									"id": "9ef980b1-c8f4-43f2-ab34-3b31433e2ac9",
									"name": "Bad Request",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\"<string>\""
										},
										"url": {
											"raw": "{{baseUrl}}/v2/construct?format=<string>&version=<string>&name=<string>&validations=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"construct"
											],
											"query": [
												{
													"key": "format",
													"value": "<string>"
												},
												{
													"key": "version",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "validations",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Constructor Catalog",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "996347d7-c6e9-44ef-9685-7233732c5620",
										"exec": [
											"pm.test(\"Status validated successfully and got \"+pm.response.code, function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,400,401,500])\r",
											"});\r",
											"\r",
											"const responseJson=pm.response.json();\r",
											"\r",
											"if (pm.response.code==200){      \r",
											"    const schema={\r",
											"        \"catalog\":{\r",
											"            \"type\":\"array\",\r",
											"            \"properties\":{\r",
											"                \"format\":{\r",
											"                    \"type\":\"string\"\r",
											"                },\r",
											"                \"version\":{\r",
											"                    \"type\":\"string\"\r",
											"                },\r",
											"                \"category\":{\r",
											"                    \"type\":\"string\"\r",
											"                },\r",
											"                \"name\":{\r",
											"                    \"type\":\"string\"\r",
											"                },\r",
											"                \"detailedName\":{\r",
											"                    \"type\":\"string\"\r",
											"                },\r",
											"                \"description\":{\r",
											"                    \"type\":\"string\"\r",
											"                },\r",
											"                \"validations\":{\r",
											"                    \"type\":\"array\",\r",
											"                    \"properties\":{\r",
											"                        \"name\":{\r",
											"                            \"type\":\"String\"\r",
											"                        },\r",
											"                        \"description\":{\r",
											"                            \"type\":\"String\"\r",
											"                        }\r",
											"                    },\r",
											"                    \"required\":[\r",
											"                        \"name\"\r",
											"                    ]\r",
											"                },\r",
											"                \"required\":[\r",
											"                    \"format\",\r",
											"                    \"version\",\r",
											"                    \"category\",\r",
											"                    \"name\"\r",
											"                ]\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"    pm.test(\"schema test passed\", function(){\r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"    })\r",
											"}else if(pm.response.code==401){\r",
											"    //Following test cases will be executed only if status code was 200\r",
											"    //Below test case validates the success flag value equals to \"false\" or not\r",
											"    pm.test(\"Code should be \\\"HTTP-401\\\"\", function(){\r",
											"        pm.expect(responseJson.errors[0].code).to.eqls(\"HTTP-401\");\r",
											"    });\r",
											"    pm.test(\"success should be \\\"false\\\"\", function(){\r",
											"        pm.expect(responseJson.success).to.eqls(false);\r",
											"    });\r",
											"    pm.test(\"Message matched successfully\",function(){\r",
											"        pm.expect(responseJson.errors[0].message).to.eqls(\"Unauthorized. Authentication failure\");\r",
											"    })\r",
											"    pm.test(\"Severity should be \\\"error\\\"\", function(){\r",
											"        pm.expect(responseJson.errors[0].severity).to.eqls(\"error\");\r",
											"    });\r",
											"    //Below test case validates the severity matches with allowed values\r",
											"    pm.test(\"Error severity matches with expected values\", function () {\r",
											"        pm.expect(responseJson.errors[0].severity).to.be.oneOf([\"fatal\",\"error\",\"warn\"])\r",
											"    });\r",
											"    //Below tescase validates the schema/ Data type of the response fields\r",
											"    pm.test(\"Schema type verification for status code 401\", function(){\r",
											"        pm.expect(responseJson.success).to.be.a(\"Boolean\");\r",
											"        pm.expect(responseJson.errors).to.be.a(\"Array\");\r",
											"        pm.expect(responseJson.errors[0].code).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].message).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].severity).to.be.a(\"String\");\r",
											"    })\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "c9cf3172-650a-476a-9887-5f95bc322027",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"disabled": true
									}
								],
								"url": "{{baseUrl}}/v2/construct/catalog",
								"description": "Returns list of messages supported by Constructor."
							},
							"response": [
								{
									"id": "2c5fcb66-bacb-4027-b5c1-cb17db590e46",
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/v2/construct/catalog"
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
								},
								{
									"id": "a3d21605-c3b6-4598-8426-28762b529f77",
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/v2/construct/catalog"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"catalog\": [\n    {\n      \"format\": \"<string>\",\n      \"version\": \"<string>\",\n      \"category\": \"<string>\",\n      \"name\": \"<string>\",\n      \"detailedName\": \"<string>\",\n      \"description\": \"<string>\",\n      \"validations\": [\n        {\n          \"name\": \"<string>\",\n          \"description\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"description\": \"<string>\"\n        }\n      ]\n    },\n    {\n      \"format\": \"<string>\",\n      \"version\": \"<string>\",\n      \"category\": \"<string>\",\n      \"name\": \"<string>\",\n      \"detailedName\": \"<string>\",\n      \"description\": \"<string>\",\n      \"validations\": [\n        {\n          \"name\": \"<string>\",\n          \"description\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"description\": \"<string>\"\n        }\n      ]\n    }\n  ]\n}"
								},
								{
									"id": "c249e5c6-a9b4-4bd1-8b2e-bb0f4d9ed2ac",
									"name": "Not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/v2/construct/catalog"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": ""
								}
							]
						}
					],
					"_postman_id": "00bc0e66-53d3-4f97-b9c3-435e7de7ca17",
					"_postman_isSubFolder": true
				},
				{
					"name": "creator",
					"item": [
						{
							"name": "Creator Catalog",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cfaf774-bd7a-446c-a837-17942479e933",
										"exec": [
											"pm.test(\"Status validated successfully and got \"+pm.response.code, function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,400,401,500])\r",
											"});\r",
											"\r",
											"const responseJson=pm.response.json();\r",
											"\r",
											"if (pm.response.code==200){      \r",
											"    const schema={\r",
											"        \"catalog\":{\r",
											"            \"type\":\"array\",\r",
											"            \"properties\":{\r",
											"                \"sourceFormat\":{\r",
											"                    \"type\":\"string\"\r",
											"                },\r",
											"                \"sourceVersion\":{\r",
											"                    \"type\":\"string\"\r",
											"                },\r",
											"                \"sourceName\":{\r",
											"                    \"type\":\"string\"\r",
											"                },\r",
											"                \"sourceDetailedName\":{\r",
											"                    \"type\":\"string\"\r",
											"                },\r",
											"                \"sourceDescription\":{\r",
											"                    \"type\":\"string\"\r",
											"                },\r",
											"                \"sourceValidations\":{\r",
											"                    \"type\":\"array\",\r",
											"                    \"properties\":{\r",
											"                        \"name\":{\r",
											"                            \"type\":\"String\"\r",
											"                        },\r",
											"                        \"description\":{\r",
											"                            \"type\":\"String\"\r",
											"                        }\r",
											"                    },\r",
											"                    \"required\":[\r",
											"                        \"name\",\r",
											"\t\t\t\t\"description\"\r",
											"                    ]\r",
											"                },\r",
											"\t\t\t\t\"targetFormat\":{\r",
											"                    \"type\":\"string\"\r",
											"                },\r",
											"                \"targetVersion\":{\r",
											"                    \"type\":\"string\"\r",
											"                },\r",
											"                \"targetName\":{\r",
											"                    \"type\":\"string\"\r",
											"                },\r",
											"                \"targetDetailedName\":{\r",
											"                    \"type\":\"string\"\r",
											"                },\r",
											"                \"targetDescription\":{\r",
											"                    \"type\":\"string\"\r",
											"                },\r",
											"                \"targetValidations\":{\r",
											"                    \"type\":\"array\",\r",
											"                    \"properties\":{\r",
											"                        \"name\":{\r",
											"                            \"type\":\"String\"\r",
											"                        },\r",
											"                        \"description\":{\r",
											"                            \"type\":\"String\"\r",
											"                        }\r",
											"                    },\r",
											"                    \"required\":[\r",
											"                        \"name\"\r",
											"                    ]\r",
											"                },\r",
											"                \"required\":[\r",
											"                    \"sourceFormat\",\r",
											"                    \"sourceVersion\",\r",
											"                    \"sourceName\",\r",
											"                    \"targetFormat\",\r",
											"                    \"targetVersion\",\r",
											"                    \"targetName\"\r",
											"                ]\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"    pm.test(\"schema test passed\", function(){\r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"    })\r",
											"}else if(pm.response.code==401){\r",
											"    //Following test cases will be executed only if status code was 200\r",
											"    //Below test case validates the success flag value equals to \"false\" or not\r",
											"    pm.test(\"Code should be \\\"HTTP-401\\\"\", function(){\r",
											"        pm.expect(responseJson.errors[0].code).to.eqls(\"HTTP-401\");\r",
											"    });\r",
											"    pm.test(\"success should be \\\"false\\\"\", function(){\r",
											"        pm.expect(responseJson.success).to.eqls(false);\r",
											"    });\r",
											"    pm.test(\"Message matched successfully\",function(){\r",
											"        pm.expect(responseJson.errors[0].message).to.eqls(\"Unauthorized. Authentication failure\");\r",
											"    })\r",
											"    pm.test(\"Severity should be \\\"error\\\"\", function(){\r",
											"        pm.expect(responseJson.errors[0].severity).to.eqls(\"error\");\r",
											"    });\r",
											"    //Below test case validates the severity matches with allowed values\r",
											"    pm.test(\"Error severity matches with expected values\", function () {\r",
											"        pm.expect(responseJson.errors[0].severity).to.be.oneOf([\"fatal\",\"error\",\"warn\"])\r",
											"    });\r",
											"    //Below tescase validates the schema/ Data type of the response fields\r",
											"    pm.test(\"Schema type verification for status code 401\", function(){\r",
											"        pm.expect(responseJson.success).to.be.a(\"Boolean\");\r",
											"        pm.expect(responseJson.errors).to.be.a(\"Array\");\r",
											"        pm.expect(responseJson.errors[0].code).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].message).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].severity).to.be.a(\"String\");\r",
											"    })\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "ac030c13-bd4d-42c7-ba45-6d375e4afd77",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"disabled": true
									}
								],
								"url": "{{baseUrl}}/v2/creator/catalog",
								"description": "Returns list of available mappings for message creation."
							},
							"response": [
								{
									"id": "64c2d557-8af3-4f0d-bc67-35866591acdb",
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/v2/creator/catalog"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"catalog\": [\n    {\n      \"sourceFormat\": \"<string>\",\n      \"sourceVersion\": \"<string>\",\n      \"sourceName\": \"<string>\",\n      \"targetFormat\": \"<string>\",\n      \"targetVersion\": \"<string>\",\n      \"targetName\": \"<string>\",\n      \"sourceDetailedName\": \"<string>\",\n      \"sourceDescription\": \"<string>\",\n      \"sourceValidations\": [\n        {\n          \"name\": \"<string>\",\n          \"description\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"description\": \"<string>\"\n        }\n      ],\n      \"targetDetailedName\": \"<string>\",\n      \"targetDescription\": \"<string>\",\n      \"targetValidations\": [\n        {\n          \"name\": \"<string>\",\n          \"description\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"description\": \"<string>\"\n        }\n      ]\n    },\n    {\n      \"sourceFormat\": \"<string>\",\n      \"sourceVersion\": \"<string>\",\n      \"sourceName\": \"<string>\",\n      \"targetFormat\": \"<string>\",\n      \"targetVersion\": \"<string>\",\n      \"targetName\": \"<string>\",\n      \"sourceDetailedName\": \"<string>\",\n      \"sourceDescription\": \"<string>\",\n      \"sourceValidations\": [\n        {\n          \"name\": \"<string>\",\n          \"description\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"description\": \"<string>\"\n        }\n      ],\n      \"targetDetailedName\": \"<string>\",\n      \"targetDescription\": \"<string>\",\n      \"targetValidations\": [\n        {\n          \"name\": \"<string>\",\n          \"description\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"description\": \"<string>\"\n        }\n      ]\n    }\n  ]\n}"
								},
								{
									"id": "dafe25a1-c4f6-4b2e-94a3-59bde7860696",
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/v2/creator/catalog"
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
								},
								{
									"id": "f050e6a9-8484-433f-b55a-4e7910027bfb",
									"name": "Not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/v2/creator/catalog"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": ""
								}
							]
						},
						{
							"name": "Generic In Bound",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b61686d-f543-49e7-a972-c0cc1ddde77c",
										"exec": [
											"pm.test(\"Status validated successfully and got \"+pm.response.code, function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,500,401])\r",
											"});\r",
											"\r",
											"const responseJson=pm.response.json();\r",
											"let keys=Object.keys(responseJson);\r",
											"if (pm.response.code==200){\r",
											"    if(responseJson.success==true){\r",
											"        const schema={\r",
											"            \"success\":{\r",
											"                \"type\":\"Boolean\"\r",
											"            },\r",
											"            \"messageId\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"sourceFormat\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"\t\t\t\"sourceVersion\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"sourceName\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"\t\t\t\"targetFormat\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"targetVersion\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"\t\t\t\"targetName\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"output\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"\t\t\t\"parsedPayload\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"required\":[\r",
											"                \"success\",\r",
											"                \"messageId\"\r",
											"            ]\r",
											"        };\r",
											"        pm.test(\"schema test passed\", function(){\r",
											"            pm.response.to.have.jsonSchema(schema);\r",
											"        });\r",
											"    }else {\r",
											"        const schema={\r",
											"            \"success\":{\r",
											"                \"type\":\"Boolean\"\r",
											"            },\r",
											"            \"messageId\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"errors\":{\r",
											"                \"type\":\"Object\",\r",
											"                \"items\":{\r",
											"                    \"type\":\"array\",\r",
											"                    \"properties\":{\r",
											"                        \"code\":{\r",
											"                            \"type\":\"String\"\r",
											"                        },\r",
											"                        \"message\":{\r",
											"                            \"type\":\"String\"\r",
											"                        },\r",
											"                        \"severity\":{\r",
											"                            \"type\":\"String\"\r",
											"                        },\r",
											"                        \"line\":{\r",
											"                            \"type\":\"integer\"\r",
											"                        },\r",
											"                        \"column\":{\r",
											"                            \"type\":\"integer\"\r",
											"                        },\r",
											"                        \"fieldId\":{\r",
											"                            \"type\":\"string\"\r",
											"                        },\r",
											"                        \"validation\":{\r",
											"                            \"type\":\"string\"\r",
											"                        }\r",
											"                    }\r",
											"                },\r",
											"                \"required\":[\r",
											"                    \"code\",\r",
											"                    \"message\",\r",
											"                    \"severity\"\r",
											"                ]\r",
											"            },\r",
											"            \"output\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"required\":[\r",
											"                \"success\",\r",
											"                \"messageId\"\r",
											"            ]\r",
											"        };\r",
											"        pm.test(\"schema test passed\", function(){\r",
											"            pm.response.to.have.jsonSchema(schema);\r",
											"        })\r",
											"        pm.test(\"success should be \\\"false\\\"\", function(){\r",
											"            pm.expect(responseJson.success).to.eqls(false);\r",
											"        });\r",
											"        pm.test(\"Message ID was mandatory\",function(){\r",
											"            pm.expect(keys).to.include(\"messageId\")\r",
											"        })\r",
											"        pm.test(\"Check for errors, its mandatory\",function(){\r",
											"            pm.expect(keys).to.include(\"errors\")\r",
											"        })\r",
											"        pm.test(\"check for output\",function(){\r",
											"            pm.expect(keys).to.include(\"output\")\r",
											"            pm.expect(responseJson.output).to.be.a(\"String\")\r",
											"        })\r",
											"    }\r",
											"\r",
											"}else if (pm.response.code ==401){\r",
											"    pm.test(\"Code should be \\\"HTTP-401\\\"\", function(){\r",
											"        pm.expect(responseJson.errors[0].code).to.eqls(\"HTTP-401\");\r",
											"    });\r",
											"    pm.test(\"success should be \\\"false\\\"\", function(){\r",
											"        pm.expect(responseJson.success).to.eqls(false);\r",
											"    });\r",
											"    pm.test(\"Message matched successfully\",function(){\r",
											"        pm.expect(responseJson.errors[0].message).to.eqls(\"Unauthorized. Authentication failure\");\r",
											"    })\r",
											"    pm.test(\"Severity should be \\\"error\\\"\", function(){\r",
											"        pm.expect(responseJson.errors[0].severity).to.eqls(\"error\");\r",
											"    });\r",
											"    pm.test(\"Schema type verification for status code 401 succeed\", function(){\r",
											"        pm.expect(responseJson.success).to.be.a(\"Boolean\");\r",
											"        pm.expect(responseJson.errors).to.be.a(\"Array\");\r",
											"        pm.expect(responseJson.errors[0].code).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].message).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].severity).to.be.a(\"String\");\r",
											"    })\r",
											"}else{\r",
											"    // considering default status code as 500 for this request\r",
											"    pm.test(\"success should be \\\"false\\\"\", function(){\r",
											"        pm.expect(responseJson.success).to.eqls(false);\r",
											"    });\r",
											"    pm.test(\"Schema type verification for status code 500 succeed\", function(){\r",
											"        pm.expect(responseJson.success).to.be.a(\"Boolean\");\r",
											"        pm.expect(responseJson.errors).to.be.a(\"Array\");\r",
											"        pm.expect(responseJson.errors[0].code).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].message).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].severity).to.be.a(\"String\");\r",
											"    })\r",
											"\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "c5e0b6c7-cb70-4b1d-bd47-c682c7e8ce24",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/plain",
										"disabled": true
									},
									{
										"key": "Accept",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{message}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v2/creator/inbound/v1?sourceFormat={{sourceFormat}}&sourceVersion={{sourceVersion}}&payloadEncoding={{payloadEncoding}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"creator",
										"inbound",
										"v1"
									],
									"query": [
										{
											"key": "sourceFormat",
											"value": "{{sourceFormat}}",
											"description": "(Required) Format of the source message. Example: CBPR+\n\nGet accepted values by calling /v2/creator/catalog"
										},
										{
											"key": "sourceVersion",
											"value": "{{sourceVersion}}",
											"description": "(Required) Version of the source message. Example: 2.1\n\nGet accepted values by calling /v2/creator/catalog"
										},
										{
											"key": "sourceName",
											"value": "{{sourceName}}",
											"description": "Name of the source message. Example: pacs.008.001.08. This is an optional request parameter. It will be automatically identified based on the input message, if the sourceName is not specified.\n\nGet accepted values by calling /v2/creator/catalog",
											"disabled": true
										},
										{
											"key": "sourceValidations",
											"value": "{{sourceValidations}}",
											"description": "Validation nodes which needs to be executed for source message. Value should be in a CSV format. Example: Default,Validation1\n\nGet supported validations from /v2/creator/catalog\n\nNote: If not present or value is null, the Default Validation node will be executed. If the value is empty String, then the parsed source message object will not be validated.",
											"disabled": true
										},
										{
											"key": "targetName",
											"value": "{{targetName}}",
											"description": "Name of the Volante Standard message. Example: BankToCustomerDebitCreditNotification. This is an optional request parameter. It will be automatically identified based on the input message, if the targetName is not specified.\n\nGet accepted values by calling /v2/creator/catalog",
											"disabled": true
										},
										{
											"key": "targetValidations",
											"value": "{{targetValidations}}",
											"description": "Validation nodes which needs to be executed for target message. Value should be in a CSV format.  Example : Default,Validation1\n\nGet supported validations from /v2/creator/catalog\n\nNote: If not present or value is null, the Default Validation node will be executed. If the value is empty String, then the target message object will not be validated.",
											"disabled": true
										},
										{
											"key": "cascadeError",
											"value": "{{cascadeError}}",
											"description": "It supports Boolean value. Default value for cascadeError is false (not present or null).\n\ncascadeError value applies to the legs like Source leg(Parse and Validation of Source Message), Mapping leg(Transformation of Source message to Target message), and Target leg(Validation and Serialization of Target message).\nWithin a leg, errors will always be cascaded.\n\nIf the cascadeError is set to true, then the subsequent legs will be executed even if there are any errors in the current leg. Otherwise, execution will be stopped at the current leg itself.\n\nIf all the errors are of Warn severity in the current leg, then the subsequent legs will be executed irrespective of the cascadeError value.\n\nIrrespective of the cascadeError value, the execution will stop at the mapping leg, only if any mapping exceptions occurred with severity ERROR or Higher. Reason : In case of mapping errors the target object will be partially constructed and hence proceeding to the next step is not viable.",
											"disabled": true
										},
										{
											"key": "payloadEncoding",
											"value": "{{payloadEncoding}}",
											"description": "Encoding type of the input and output message. This is an optional field.\nAccepted Values are: Base64\n\nNote: In case of unsupported value, input is treated as plain text."
										},
										{
											"key": "includePayload",
											"value": "{{includePayload}}",
											"description": "Option to include the parsed message as JSON in the response. \nAccepted Values are: Always, Never and OnError.\nDefault value is Never. \n\nNote: Default value will be used, if this parameter is not present.",
											"disabled": true
										},
										{
											"key": "mappingOptions",
											"value": "{{mappingOptions}}",
											"description": "Option to include comma separated key value pair to control the creator result. Key and Value are case-sensitive.\n\nPattern : <key:value>,<key:value> \n\nExample : ApplicationMode:I,MessagePriority:U",
											"disabled": true
										}
									]
								},
								"description": "Creates Volante Standard message from the given Clearing specific input message.\n\nThis service requires the raw message as input in the body and returns the Volante Standard message as a creation result."
							},
							"response": [
								{
									"id": "34aa6e72-0ff9-43ef-9258-996f26f0e7cf",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\"<string>\""
										},
										"url": {
											"raw": "{{baseUrl}}/v2/creator/inbound/v1?sourceFormat=<string>&sourceVersion=<string>&sourceName=<string>&sourceValidations=<string>&targetName=<string>&targetValidations=<string>&cascadeError=<boolean>&payloadEncoding=<string>&includePayload=<string>&mappingOptions=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"creator",
												"inbound",
												"v1"
											],
											"query": [
												{
													"key": "sourceFormat",
													"value": "<string>"
												},
												{
													"key": "sourceVersion",
													"value": "<string>"
												},
												{
													"key": "sourceName",
													"value": "<string>"
												},
												{
													"key": "sourceValidations",
													"value": "<string>"
												},
												{
													"key": "targetName",
													"value": "<string>"
												},
												{
													"key": "targetValidations",
													"value": "<string>"
												},
												{
													"key": "cascadeError",
													"value": "<boolean>"
												},
												{
													"key": "payloadEncoding",
													"value": "<string>"
												},
												{
													"key": "includePayload",
													"value": "<string>"
												},
												{
													"key": "mappingOptions",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"messageId\": \"<string>\",\n  \"sourceFormat\": \"<string>\",\n  \"sourceVersion\": \"<string>\",\n  \"sourceName\": \"<string>\",\n  \"targetFormat\": \"<string>\",\n  \"targetVersion\": \"<string>\",\n  \"targetName\": \"<string>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\",\n      \"line\": \"<integer>\",\n      \"column\": \"<integer>\",\n      \"fieldId\": \"<string>\",\n      \"validation\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\",\n      \"line\": \"<integer>\",\n      \"column\": \"<integer>\",\n      \"fieldId\": \"<string>\",\n      \"validation\": \"<string>\"\n    }\n  ],\n  \"output\": \"<string>\",\n  \"parsedPayload\": \"<string>\"\n}"
								},
								{
									"id": "5c6499d2-8432-45f0-9e08-92d463c9dc36",
									"name": "Bad Request",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\"<string>\""
										},
										"url": {
											"raw": "{{baseUrl}}/v2/creator/inbound/v1?sourceFormat=<string>&sourceVersion=<string>&sourceName=<string>&sourceValidations=<string>&targetName=<string>&targetValidations=<string>&cascadeError=<boolean>&payloadEncoding=<string>&includePayload=<string>&mappingOptions=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"creator",
												"inbound",
												"v1"
											],
											"query": [
												{
													"key": "sourceFormat",
													"value": "<string>"
												},
												{
													"key": "sourceVersion",
													"value": "<string>"
												},
												{
													"key": "sourceName",
													"value": "<string>"
												},
												{
													"key": "sourceValidations",
													"value": "<string>"
												},
												{
													"key": "targetName",
													"value": "<string>"
												},
												{
													"key": "targetValidations",
													"value": "<string>"
												},
												{
													"key": "cascadeError",
													"value": "<boolean>"
												},
												{
													"key": "payloadEncoding",
													"value": "<string>"
												},
												{
													"key": "includePayload",
													"value": "<string>"
												},
												{
													"key": "mappingOptions",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
								},
								{
									"id": "6b1114df-0690-4729-b1f8-da4c5cb4cfbd",
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\"<string>\""
										},
										"url": {
											"raw": "{{baseUrl}}/v2/creator/inbound/v1?sourceFormat=<string>&sourceVersion=<string>&sourceName=<string>&sourceValidations=<string>&targetName=<string>&targetValidations=<string>&cascadeError=<boolean>&payloadEncoding=<string>&includePayload=<string>&mappingOptions=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"creator",
												"inbound",
												"v1"
											],
											"query": [
												{
													"key": "sourceFormat",
													"value": "<string>"
												},
												{
													"key": "sourceVersion",
													"value": "<string>"
												},
												{
													"key": "sourceName",
													"value": "<string>"
												},
												{
													"key": "sourceValidations",
													"value": "<string>"
												},
												{
													"key": "targetName",
													"value": "<string>"
												},
												{
													"key": "targetValidations",
													"value": "<string>"
												},
												{
													"key": "cascadeError",
													"value": "<boolean>"
												},
												{
													"key": "payloadEncoding",
													"value": "<string>"
												},
												{
													"key": "includePayload",
													"value": "<string>"
												},
												{
													"key": "mappingOptions",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
								},
								{
									"id": "7367d468-eafd-4d0f-be65-03dc941e5a79",
									"name": "Unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\"<string>\""
										},
										"url": {
											"raw": "{{baseUrl}}/v2/creator/inbound/v1?sourceFormat=<string>&sourceVersion=<string>&sourceName=<string>&sourceValidations=<string>&targetName=<string>&targetValidations=<string>&cascadeError=<boolean>&payloadEncoding=<string>&includePayload=<string>&mappingOptions=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"creator",
												"inbound",
												"v1"
											],
											"query": [
												{
													"key": "sourceFormat",
													"value": "<string>"
												},
												{
													"key": "sourceVersion",
													"value": "<string>"
												},
												{
													"key": "sourceName",
													"value": "<string>"
												},
												{
													"key": "sourceValidations",
													"value": "<string>"
												},
												{
													"key": "targetName",
													"value": "<string>"
												},
												{
													"key": "targetValidations",
													"value": "<string>"
												},
												{
													"key": "cascadeError",
													"value": "<boolean>"
												},
												{
													"key": "payloadEncoding",
													"value": "<string>"
												},
												{
													"key": "includePayload",
													"value": "<string>"
												},
												{
													"key": "mappingOptions",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Generic Out Bound",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bf0e5589-8de7-4455-8c39-64ceb282f227",
										"exec": [
											"pm.test(\"Status validated successfully and got \"+pm.response.code, function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,500,401])\r",
											"});\r",
											"\r",
											"const responseJson=pm.response.json();\r",
											"let keys=Object.keys(responseJson);\r",
											"if (pm.response.code==200){\r",
											"    if(responseJson.success==true){\r",
											"        const schema={\r",
											"            \"success\":{\r",
											"                \"type\":\"Boolean\"\r",
											"            },\r",
											"            \"messageId\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"sourceFormat\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"\t\t\t\"sourceVersion\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"sourceName\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"\t\t\t\"targetFormat\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"targetVersion\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"\t\t\t\"targetName\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"output\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"\t\t\t\"parsedPayload\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"required\":[\r",
											"                \"success\",\r",
											"                \"messageId\"\r",
											"            ]\r",
											"        };\r",
											"        pm.test(\"schema test passed\", function(){\r",
											"            pm.response.to.have.jsonSchema(schema);\r",
											"        });\r",
											"    }else {\r",
											"        const schema={\r",
											"            \"success\":{\r",
											"                \"type\":\"Boolean\"\r",
											"            },\r",
											"            \"messageId\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"errors\":{\r",
											"                \"type\":\"Object\",\r",
											"                \"items\":{\r",
											"                    \"type\":\"array\",\r",
											"                    \"properties\":{\r",
											"                        \"code\":{\r",
											"                            \"type\":\"String\"\r",
											"                        },\r",
											"                        \"message\":{\r",
											"                            \"type\":\"String\"\r",
											"                        },\r",
											"                        \"severity\":{\r",
											"                            \"type\":\"String\"\r",
											"                        },\r",
											"                        \"line\":{\r",
											"                            \"type\":\"integer\"\r",
											"                        },\r",
											"                        \"column\":{\r",
											"                            \"type\":\"integer\"\r",
											"                        },\r",
											"                        \"fieldId\":{\r",
											"                            \"type\":\"string\"\r",
											"                        },\r",
											"                        \"validation\":{\r",
											"                            \"type\":\"string\"\r",
											"                        }\r",
											"                    }\r",
											"                },\r",
											"                \"required\":[\r",
											"                    \"code\",\r",
											"                    \"message\",\r",
											"                    \"severity\"\r",
											"                ]\r",
											"            },\r",
											"            \"output\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"required\":[\r",
											"                \"success\",\r",
											"                \"messageId\"\r",
											"            ]\r",
											"        };\r",
											"        pm.test(\"schema test passed\", function(){\r",
											"            pm.response.to.have.jsonSchema(schema);\r",
											"        })\r",
											"        pm.test(\"success should be \\\"false\\\"\", function(){\r",
											"            pm.expect(responseJson.success).to.eqls(false);\r",
											"        });\r",
											"        \r",
											"    }\r",
											"\r",
											"}else if (pm.response.code ==401){\r",
											"    pm.test(\"Code should be \\\"HTTP-401\\\"\", function(){\r",
											"        pm.expect(responseJson.errors[0].code).to.eqls(\"HTTP-401\");\r",
											"    });\r",
											"    pm.test(\"success should be \\\"false\\\"\", function(){\r",
											"        pm.expect(responseJson.success).to.eqls(false);\r",
											"    });\r",
											"    pm.test(\"Message matched successfully\",function(){\r",
											"        pm.expect(responseJson.errors[0].message).to.eqls(\"Unauthorized. Authentication failure\");\r",
											"    })\r",
											"    pm.test(\"Severity should be \\\"error\\\"\", function(){\r",
											"        pm.expect(responseJson.errors[0].severity).to.eqls(\"error\");\r",
											"    });\r",
											"    pm.test(\"Schema type verification for status code 401 succeed\", function(){\r",
											"        pm.expect(responseJson.success).to.be.a(\"Boolean\");\r",
											"        pm.expect(responseJson.errors).to.be.a(\"Array\");\r",
											"        pm.expect(responseJson.errors[0].code).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].message).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].severity).to.be.a(\"String\");\r",
											"    })\r",
											"}else{\r",
											"    // considering default status code as 500 for this request\r",
											"    pm.test(\"success should be \\\"false\\\"\", function(){\r",
											"        pm.expect(responseJson.success).to.eqls(false);\r",
											"    });\r",
											"    pm.test(\"Schema type verification for status code 500 succeed\", function(){\r",
											"        pm.expect(responseJson.success).to.be.a(\"Boolean\");\r",
											"        pm.expect(responseJson.errors).to.be.a(\"Array\");\r",
											"        pm.expect(responseJson.errors[0].code).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].message).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].severity).to.be.a(\"String\");\r",
											"    })\r",
											"\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "958a7e92-928f-4bf7-b05e-b9ee7c0fe1c2",
										"exec": [
											"pm.environment.set(\"Source\",\"{{Source}}\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "52be4873-1a66-4ac3-acd2-7205f18ea741",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/plain",
										"disabled": true
									},
									{
										"key": "Accept",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{message}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v2/creator/outbound/v1?targetFormat={{targetFormat}}&targetVersion={{targetVersion}}&payloadEncoding={{payloadEncoding}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"creator",
										"outbound",
										"v1"
									],
									"query": [
										{
											"key": "sourceName",
											"value": "{{sourceName}}",
											"description": "Name of the Volante Standard message. Example: BankToCustomerDebitCreditNotification. This is an optional request parameter. It will be automatically identified based on the input message, if the sourceName is not specified.\n\nGet accepted values by calling /v2/creator/catalog",
											"disabled": true
										},
										{
											"key": "sourceValidations",
											"value": "{{sourceValidations}}",
											"description": "Validation nodes which needs to be executed for source message. Value should be in a CSV format. Example: Default,Validation1\n\nGet supported validations from /v2/creator/catalog\n\nNote: If not present or value is null, the Default Validation node will be executed. If the value is empty String, then the parsed source message object will not be validated.",
											"disabled": true
										},
										{
											"key": "targetFormat",
											"value": "{{targetFormat}}",
											"description": "(Required) Format of the target message. Example: CBPR+\n\nGet accepted values by calling /v2/creator/catalog"
										},
										{
											"key": "targetVersion",
											"value": "{{targetVersion}}",
											"description": "(Required) Version of the target message. Example: 2.0\n\nGet accepted values by calling /v2/creator/catalog"
										},
										{
											"key": "targetName",
											"value": "{{targetName}}",
											"description": "Name of the target message. Example: pacs.008.001.08. This is an optional request parameter. It will be automatically identified based on the input message, if the targetName is not specified.\n\nGet accepted values by calling /v2/creator/catalog",
											"disabled": true
										},
										{
											"key": "targetValidations",
											"value": "{{targetValidations}}",
											"description": "Validation nodes which needs to be executed for target message. Value should be in a CSV format.  Example : Default,Validation1\n\nGet supported validations from /v2/creator/catalog\n\nNote: If not present or value is null, the Default Validation node will be executed. If the value is empty String, then the target message object will not be validated.",
											"disabled": true
										},
										{
											"key": "cascadeError",
											"value": "{{cascadeError}}",
											"description": "It supports Boolean value. Default value for cascadeError is false (not present or null).\n\ncascadeError value applies to the legs like Source leg(Parse and Validation of Source Message), Mapping leg(Transformation of Source message to Target message), and Target leg(Validation and Serialization of Target message).\nWithin a leg, errors will always be cascaded.\n\nIf the cascadeError is set to true, then the subsequent legs will be executed even if there are any errors in the current leg. Otherwise, execution will be stopped at the current leg itself.\n\nIf all the errors are of Warn severity in the current leg, then the subsequent legs will be executed irrespective of the cascadeError value.\n\nIrrespective of the cascadeError value, the execution will stop at the mapping leg, only if any mapping exceptions occurred with severity ERROR or Higher. Reason : In case of mapping errors the target object will be partially constructed and hence proceeding to the next step is not viable.",
											"disabled": true
										},
										{
											"key": "payloadEncoding",
											"value": "{{payloadEncoding}}",
											"description": "Encoding type of the input and output message. This is an optional field.\nAccepted Values are: Base64\n\nNote: In case of unsupported value, input is treated as plain text."
										},
										{
											"key": "includePayload",
											"value": "{{includePayload}}",
											"description": "Option to include the parsed message as JSON in the response. \nAccepted Values are: Always, Never and OnError.\nDefault value is Never. \n\nNote: Default value will be used, if this parameter is not present.",
											"disabled": true
										},
										{
											"key": "mappingOptions",
											"value": "{{mappingOptions}}",
											"description": "Option to include comma separated key value pair to control the creator result. Key and Value are case-sensitive.\n\nPattern : <key:value>,<key:value> \n\nExample : ApplicationMode:I,MessagePriority:U",
											"disabled": true
										}
									]
								},
								"description": "Creates Clearing specific message from the given Volante Standard input message.\n\nThis service requires the Volante Standard message as input in the body and returns the creation result."
							},
							"response": [
								{
									"id": "4c569432-1155-4c82-bbaa-a3a9dd7da0ec",
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\"<string>\""
										},
										"url": {
											"raw": "{{baseUrl}}/v2/creator/outbound/v1?sourceName=<string>&sourceValidations=<string>&targetFormat=<string>&targetVersion=<string>&targetName=<string>&targetValidations=<string>&cascadeError=<boolean>&payloadEncoding=<string>&includePayload=<string>&mappingOptions=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"creator",
												"outbound",
												"v1"
											],
											"query": [
												{
													"key": "sourceName",
													"value": "<string>"
												},
												{
													"key": "sourceValidations",
													"value": "<string>"
												},
												{
													"key": "targetFormat",
													"value": "<string>"
												},
												{
													"key": "targetVersion",
													"value": "<string>"
												},
												{
													"key": "targetName",
													"value": "<string>"
												},
												{
													"key": "targetValidations",
													"value": "<string>"
												},
												{
													"key": "cascadeError",
													"value": "<boolean>"
												},
												{
													"key": "payloadEncoding",
													"value": "<string>"
												},
												{
													"key": "includePayload",
													"value": "<string>"
												},
												{
													"key": "mappingOptions",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
								},
								{
									"id": "aaa056d8-7e18-4fe9-b3aa-4792910138d6",
									"name": "Unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\"<string>\""
										},
										"url": {
											"raw": "{{baseUrl}}/v2/creator/outbound/v1?sourceName=<string>&sourceValidations=<string>&targetFormat=<string>&targetVersion=<string>&targetName=<string>&targetValidations=<string>&cascadeError=<boolean>&payloadEncoding=<string>&includePayload=<string>&mappingOptions=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"creator",
												"outbound",
												"v1"
											],
											"query": [
												{
													"key": "sourceName",
													"value": "<string>"
												},
												{
													"key": "sourceValidations",
													"value": "<string>"
												},
												{
													"key": "targetFormat",
													"value": "<string>"
												},
												{
													"key": "targetVersion",
													"value": "<string>"
												},
												{
													"key": "targetName",
													"value": "<string>"
												},
												{
													"key": "targetValidations",
													"value": "<string>"
												},
												{
													"key": "cascadeError",
													"value": "<boolean>"
												},
												{
													"key": "payloadEncoding",
													"value": "<string>"
												},
												{
													"key": "includePayload",
													"value": "<string>"
												},
												{
													"key": "mappingOptions",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
								},
								{
									"id": "f3bb74bd-ad94-41e9-a585-32095a99a8c6",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\"<string>\""
										},
										"url": {
											"raw": "{{baseUrl}}/v2/creator/outbound/v1?sourceName=<string>&sourceValidations=<string>&targetFormat=<string>&targetVersion=<string>&targetName=<string>&targetValidations=<string>&cascadeError=<boolean>&payloadEncoding=<string>&includePayload=<string>&mappingOptions=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"creator",
												"outbound",
												"v1"
											],
											"query": [
												{
													"key": "sourceName",
													"value": "<string>"
												},
												{
													"key": "sourceValidations",
													"value": "<string>"
												},
												{
													"key": "targetFormat",
													"value": "<string>"
												},
												{
													"key": "targetVersion",
													"value": "<string>"
												},
												{
													"key": "targetName",
													"value": "<string>"
												},
												{
													"key": "targetValidations",
													"value": "<string>"
												},
												{
													"key": "cascadeError",
													"value": "<boolean>"
												},
												{
													"key": "payloadEncoding",
													"value": "<string>"
												},
												{
													"key": "includePayload",
													"value": "<string>"
												},
												{
													"key": "mappingOptions",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"messageId\": \"<string>\",\n  \"sourceFormat\": \"<string>\",\n  \"sourceVersion\": \"<string>\",\n  \"sourceName\": \"<string>\",\n  \"targetFormat\": \"<string>\",\n  \"targetVersion\": \"<string>\",\n  \"targetName\": \"<string>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\",\n      \"line\": \"<integer>\",\n      \"column\": \"<integer>\",\n      \"fieldId\": \"<string>\",\n      \"validation\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\",\n      \"line\": \"<integer>\",\n      \"column\": \"<integer>\",\n      \"fieldId\": \"<string>\",\n      \"validation\": \"<string>\"\n    }\n  ],\n  \"output\": \"<string>\",\n  \"parsedPayload\": \"<string>\"\n}"
								},
								{
									"id": "fca36ccc-1061-4695-a160-f519c521bf9b",
									"name": "Bad Request",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\"<string>\""
										},
										"url": {
											"raw": "{{baseUrl}}/v2/creator/outbound/v1?sourceName=<string>&sourceValidations=<string>&targetFormat=<string>&targetVersion=<string>&targetName=<string>&targetValidations=<string>&cascadeError=<boolean>&payloadEncoding=<string>&includePayload=<string>&mappingOptions=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"creator",
												"outbound",
												"v1"
											],
											"query": [
												{
													"key": "sourceName",
													"value": "<string>"
												},
												{
													"key": "sourceValidations",
													"value": "<string>"
												},
												{
													"key": "targetFormat",
													"value": "<string>"
												},
												{
													"key": "targetVersion",
													"value": "<string>"
												},
												{
													"key": "targetName",
													"value": "<string>"
												},
												{
													"key": "targetValidations",
													"value": "<string>"
												},
												{
													"key": "cascadeError",
													"value": "<boolean>"
												},
												{
													"key": "payloadEncoding",
													"value": "<string>"
												},
												{
													"key": "includePayload",
													"value": "<string>"
												},
												{
													"key": "mappingOptions",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						}
					],
					"_postman_id": "f77f5ca3-904a-4ad9-81cf-296b427d9fbf",
					"_postman_isSubFolder": true
				},
				{
					"name": "transformer",
					"item": [
						{
							"name": "Transformer XML Enveloped",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c115303d-4448-48aa-8d7b-e4a5b2fce3c6",
										"exec": [
											"pm.test(\"Status validated successfully and got \"+pm.response.code, function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,500,401])\r",
											"});\r",
											"\r",
											"const responseJson=pm.response.json();\r",
											"let keys=Object.keys(responseJson);\r",
											"if (pm.response.code==200){\r",
											"    if(responseJson.success==true){\r",
											"        const schema={\r",
											"            \"success\":{\r",
											"                \"type\":\"Boolean\"\r",
											"            },\r",
											"            \"messageId\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"sourceFormat\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"\t\t\t\"sourceVersion\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"sourceName\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"\t\t\t\"targetFormat\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"targetVersion\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"\t\t\t\"targetName\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"output\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"\t\t\t\"parsedPayload\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"required\":[\r",
											"                \"success\",\r",
											"                \"messageId\"\r",
											"            ]\r",
											"        };\r",
											"        pm.test(\"schema test passed\", function(){\r",
											"            pm.response.to.have.jsonSchema(schema);\r",
											"        });\r",
											"        \r",
											"    }else {\r",
											"        const schema={\r",
											"            \"success\":{\r",
											"                \"type\":\"Boolean\"\r",
											"            },\r",
											"            \"messageId\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"errors\":{\r",
											"                \"type\":\"Object\",\r",
											"                \"items\":{\r",
											"                    \"type\":\"array\",\r",
											"                    \"properties\":{\r",
											"                        \"code\":{\r",
											"                            \"type\":\"String\"\r",
											"                        },\r",
											"                        \"message\":{\r",
											"                            \"type\":\"String\"\r",
											"                        },\r",
											"                        \"severity\":{\r",
											"                            \"type\":\"String\"\r",
											"                        },\r",
											"                        \"line\":{\r",
											"                            \"type\":\"integer\"\r",
											"                        },\r",
											"                        \"column\":{\r",
											"                            \"type\":\"integer\"\r",
											"                        },\r",
											"                        \"fieldId\":{\r",
											"                            \"type\":\"string\"\r",
											"                        },\r",
											"                        \"validation\":{\r",
											"                            \"type\":\"string\"\r",
											"                        }\r",
											"                    }\r",
											"                },\r",
											"                \"required\":[\r",
											"                    \"code\",\r",
											"                    \"message\",\r",
											"                    \"severity\"\r",
											"                ]\r",
											"            },\r",
											"            \"output\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"required\":[\r",
											"                \"success\",\r",
											"                \"messageId\"\r",
											"            ]\r",
											"        };\r",
											"        pm.test(\"schema test passed\", function(){\r",
											"            pm.response.to.have.jsonSchema(schema);\r",
											"        })\r",
											"        pm.test(\"success should be \\\"false\\\"\", function(){\r",
											"            pm.expect(responseJson.success).to.eqls(false);\r",
											"        });\r",
											"        /*pm.test(\"Message ID was mandatory\",function(){\r",
											"            pm.expect(keys).to.include(\"messageId\")\r",
											"        })\r",
											"        pm.test(\"Check for errors, its mandatory\",function(){\r",
											"            pm.expect(keys).to.include(\"errors\")\r",
											"        })\r",
											"        pm.test(\"check for output\",function(){\r",
											"            pm.expect(keys).to.include(\"output\")\r",
											"            pm.expect(responseJson.output).to.be.a(\"String\")\r",
											"        // })*/\r",
											"    }\r",
											"\r",
											"}else if (pm.response.code ==401){\r",
											"    pm.test(\"Code should be \\\"HTTP-401\\\"\", function(){\r",
											"        pm.expect(responseJson.errors[0].code).to.eqls(\"HTTP-401\");\r",
											"    });\r",
											"    pm.test(\"success should be \\\"false\\\"\", function(){\r",
											"        pm.expect(responseJson.success).to.eqls(false);\r",
											"    });\r",
											"    pm.test(\"Message matched successfully\",function(){\r",
											"        pm.expect(responseJson.errors[0].message).to.eqls(\"Unauthorized. Authentication failure\");\r",
											"    })\r",
											"    pm.test(\"Severity should be \\\"error\\\"\", function(){\r",
											"        pm.expect(responseJson.errors[0].severity).to.eqls(\"error\");\r",
											"    });\r",
											"    pm.test(\"Schema type verification for status code 401 succeed\", function(){\r",
											"        pm.expect(responseJson.success).to.be.a(\"Boolean\");\r",
											"        pm.expect(responseJson.errors).to.be.a(\"Array\");\r",
											"        pm.expect(responseJson.errors[0].code).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].message).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].severity).to.be.a(\"String\");\r",
											"    })\r",
											"}else{\r",
											"    // considering default status code as 500 for this request\r",
											"    pm.test(\"success should be \\\"false\\\"\", function(){\r",
											"        pm.expect(responseJson.success).to.eqls(false);\r",
											"    });\r",
											"    pm.test(\"Schema type verification for status code 500 succeed\", function(){\r",
											"        pm.expect(responseJson.success).to.be.a(\"Boolean\");\r",
											"        pm.expect(responseJson.errors).to.be.a(\"Array\");\r",
											"        pm.expect(responseJson.errors[0].code).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].message).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].severity).to.be.a(\"String\");\r",
											"    })\r",
											"\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "f20d29f0-8e92-4d0c-a5a1-ca737959ce4b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Accept",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<TransformerRequest>\r\n    <message><![CDATA[{{message}}]]></message>\r\n    <cascadeError>{{cascadeError}}</cascadeError>\r\n    <includePayload>{{includePayload}}</includePayload>\r\n    <targetValidations>{{targetValidations}}</targetValidations>\r\n    <targetVersion>{{targetVersion}}</targetVersion>\r\n    <targetFormat>{{targetFormat}}</targetFormat>\r\n    <sourceValidations>{{sourceValidations}}</sourceValidations>\r\n    <sourceVersion>{{sourceVersion}}</sourceVersion>\r\n    <sourceFormat>{{sourceFormat}}</sourceFormat>\r\n</TransformerRequest>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": "{{baseUrl}}/v2/transformer",
								"description": "Service for Transforming messages from Source Format to Target Format.\n\nThis service requires input in the JSON/XML format and returns the transformation result in the JSON/XML format.\n\nContent-Type Header must be set as application/json in the request, if the input is in JSON format. Otherwise, it must be set as application/xml. "
							},
							"response": [
								{
									"id": "0761cfcd-43fe-4aa9-828e-e89b55034203",
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"message\": \"<string>\",\n  \"sourceFormat\": \"<string>\",\n  \"sourceVersion\": \"<string>\",\n  \"targetFormat\": \"<string>\",\n  \"targetVersion\": \"<string>\",\n  \"sourceName\": \"<string>\",\n  \"sourceValidations\": \"<string>\",\n  \"targetName\": \"<string>\",\n  \"targetValidations\": \"<string>\",\n  \"cascadeError\": \"<boolean>\",\n  \"payloadEncoding\": \"<string>\",\n  \"includePayload\": \"<string>\",\n  \"mappingOptions\": \"<string>\",\n  \"originalMessageName\": \"<string>\",\n  \"originalMessageValue\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/v2/transformer"
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
								},
								{
									"id": "2e9f98d4-3600-4422-891e-7a1015989f38",
									"name": "Unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"message\": \"<string>\",\n  \"sourceFormat\": \"<string>\",\n  \"sourceVersion\": \"<string>\",\n  \"targetFormat\": \"<string>\",\n  \"targetVersion\": \"<string>\",\n  \"sourceName\": \"<string>\",\n  \"sourceValidations\": \"<string>\",\n  \"targetName\": \"<string>\",\n  \"targetValidations\": \"<string>\",\n  \"cascadeError\": \"<boolean>\",\n  \"payloadEncoding\": \"<string>\",\n  \"includePayload\": \"<string>\",\n  \"mappingOptions\": \"<string>\",\n  \"originalMessageName\": \"<string>\",\n  \"originalMessageValue\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/v2/transformer"
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
								},
								{
									"id": "3c7ab28c-3c1d-435b-8226-0303bf22bdb0",
									"name": "Bad Request",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"message\": \"<string>\",\n  \"sourceFormat\": \"<string>\",\n  \"sourceVersion\": \"<string>\",\n  \"targetFormat\": \"<string>\",\n  \"targetVersion\": \"<string>\",\n  \"sourceName\": \"<string>\",\n  \"sourceValidations\": \"<string>\",\n  \"targetName\": \"<string>\",\n  \"targetValidations\": \"<string>\",\n  \"cascadeError\": \"<boolean>\",\n  \"payloadEncoding\": \"<string>\",\n  \"includePayload\": \"<string>\",\n  \"mappingOptions\": \"<string>\",\n  \"originalMessageName\": \"<string>\",\n  \"originalMessageValue\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/v2/transformer"
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
								},
								{
									"id": "be14ca20-94dd-4484-9556-b98a657e97bd",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"message\": \"<string>\",\n  \"sourceFormat\": \"<string>\",\n  \"sourceVersion\": \"<string>\",\n  \"targetFormat\": \"<string>\",\n  \"targetVersion\": \"<string>\",\n  \"sourceName\": \"<string>\",\n  \"sourceValidations\": \"<string>\",\n  \"targetName\": \"<string>\",\n  \"targetValidations\": \"<string>\",\n  \"cascadeError\": \"<boolean>\",\n  \"payloadEncoding\": \"<string>\",\n  \"includePayload\": \"<string>\",\n  \"mappingOptions\": \"<string>\",\n  \"originalMessageName\": \"<string>\",\n  \"originalMessageValue\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/v2/transformer"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"messageId\": \"<string>\",\n  \"sourceFormat\": \"<string>\",\n  \"sourceVersion\": \"<string>\",\n  \"sourceName\": \"<string>\",\n  \"targetFormat\": \"<string>\",\n  \"targetVersion\": \"<string>\",\n  \"targetName\": \"<string>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\",\n      \"line\": \"<integer>\",\n      \"column\": \"<integer>\",\n      \"fieldId\": \"<string>\",\n      \"validation\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\",\n      \"line\": \"<integer>\",\n      \"column\": \"<integer>\",\n      \"fieldId\": \"<string>\",\n      \"validation\": \"<string>\"\n    }\n  ],\n  \"output\": \"<string>\",\n  \"parsedPayload\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Transformer JSON Enveloped",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "477ff6d3-0521-4f0f-b42b-1df570e1b983",
										"exec": [
											"pm.test(\"Status validated successfully and got \"+pm.response.code, function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,500,401])\r",
											"});\r",
											"\r",
											"const responseJson=pm.response.json();\r",
											"let keys=Object.keys(responseJson);\r",
											"if (pm.response.code==200){\r",
											"    if(responseJson.success==true){\r",
											"        const schema={\r",
											"            \"success\":{\r",
											"                \"type\":\"Boolean\"\r",
											"            },\r",
											"            \"messageId\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"sourceFormat\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"\t\t\t\"sourceVersion\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"sourceName\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"\t\t\t\"targetFormat\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"targetVersion\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"\t\t\t\"targetName\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"output\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"\t\t\t\"parsedPayload\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"required\":[\r",
											"                \"success\",\r",
											"                \"messageId\"\r",
											"            ]\r",
											"           // \"additionalProperties\":false\r",
											"        };\r",
											"        pm.test(\"schema test passed\", function(){\r",
											"            pm.response.to.have.jsonSchema(schema);\r",
											"        });\r",
											"        /*pm.test(\"success should be \\\"true\\\"\", function(){\r",
											"            pm.expect(responseJson.success).to.eqls(true);\r",
											"        });\r",
											"        pm.test(\"Message ID was mandatory\",function(){\r",
											"            pm.expect(keys).to.include(\"messageId\")\r",
											"        })*/\r",
											"    }else {\r",
											"        const schema={\r",
											"            \"success\":{\r",
											"                \"type\":\"Boolean\"\r",
											"            },\r",
											"            \"messageId\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"errors\":{\r",
											"                \"type\":\"Object\",\r",
											"                \"items\":{\r",
											"                    \"type\":\"array\",\r",
											"                    \"properties\":{\r",
											"                        \"code\":{\r",
											"                            \"type\":\"String\"\r",
											"                        },\r",
											"                        \"message\":{\r",
											"                            \"type\":\"String\"\r",
											"                        },\r",
											"                        \"severity\":{\r",
											"                            \"type\":\"String\"\r",
											"                        },\r",
											"                        \"line\":{\r",
											"                            \"type\":\"integer\"\r",
											"                        },\r",
											"                        \"column\":{\r",
											"                            \"type\":\"integer\"\r",
											"                        },\r",
											"                        \"fieldId\":{\r",
											"                            \"type\":\"string\"\r",
											"                        },\r",
											"                        \"validation\":{\r",
											"                            \"type\":\"string\"\r",
											"                        }\r",
											"                    }\r",
											"                },\r",
											"                \"required\":[\r",
											"                    \"code\",\r",
											"                    \"message\",\r",
											"                    \"severity\"\r",
											"                ]\r",
											"            },\r",
											"            \"output\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"required\":[\r",
											"                \"success\",\r",
											"                \"messageId\"\r",
											"            ]\r",
											"           // \"additionalProperties\":false\r",
											"        };\r",
											"        pm.test(\"schema test passed\", function(){\r",
											"            pm.response.to.have.jsonSchema(schema);\r",
											"        })\r",
											"        pm.test(\"success should be \\\"false\\\"\", function(){\r",
											"            pm.expect(responseJson.success).to.eqls(false);\r",
											"        });\r",
											"        pm.test(\"Message ID was mandatory\",function(){\r",
											"            pm.expect(keys).to.include(\"messageId\")\r",
											"        })\r",
											"        pm.test(\"Check for errors, its mandatory\",function(){\r",
											"            pm.expect(keys).to.include(\"errors\")\r",
											"        })\r",
											"        pm.test(\"check for output\",function(){\r",
											"            pm.expect(keys).to.include(\"output\")\r",
											"            pm.expect(responseJson.output).to.be.a(\"String\")\r",
											"        })\r",
											"    }\r",
											"\r",
											"}else if (pm.response.code ==401){\r",
											"    pm.test(\"Code should be \\\"HTTP-401\\\"\", function(){\r",
											"        pm.expect(responseJson.errors[0].code).to.eqls(\"HTTP-401\");\r",
											"    });\r",
											"    pm.test(\"success should be \\\"false\\\"\", function(){\r",
											"        pm.expect(responseJson.success).to.eqls(false);\r",
											"    });\r",
											"    pm.test(\"Message matched successfully\",function(){\r",
											"        pm.expect(responseJson.errors[0].message).to.eqls(\"Unauthorized. Authentication failure\");\r",
											"    })\r",
											"    pm.test(\"Severity should be \\\"error\\\"\", function(){\r",
											"        pm.expect(responseJson.errors[0].severity).to.eqls(\"error\");\r",
											"    });\r",
											"    pm.test(\"Schema type verification for status code 401 succeed\", function(){\r",
											"        pm.expect(responseJson.success).to.be.a(\"Boolean\");\r",
											"        pm.expect(responseJson.errors).to.be.a(\"Array\");\r",
											"        pm.expect(responseJson.errors[0].code).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].message).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].severity).to.be.a(\"String\");\r",
											"    })\r",
											"}else{\r",
											"    // considering default status code as 500 for this request\r",
											"    pm.test(\"success should be \\\"false\\\"\", function(){\r",
											"        pm.expect(responseJson.success).to.eqls(false);\r",
											"    });\r",
											"    pm.test(\"Schema type verification for status code 500 succeed\", function(){\r",
											"        pm.expect(responseJson.success).to.be.a(\"Boolean\");\r",
											"        pm.expect(responseJson.errors).to.be.a(\"Array\");\r",
											"        pm.expect(responseJson.errors[0].code).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].message).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].severity).to.be.a(\"String\");\r",
											"    })\r",
											"\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "0c526847-08d2-4eb9-a779-4f38c9e86374",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Accept",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"message\": \"{{message}}\",\n  \"sourceFormat\": \"{{sourceFormat}}\",\n  \"sourceVersion\": \"{{sourceVersion}}\",\n  \"targetFormat\": \"{{targetFormat}}\",\n  \"targetVersion\": \"{{targetVersion}}\",\n  \"sourceName\": \"{{sourceName}}\",\n  \"sourceValidations\": \"{{sourceValidations}}\",\n  \"targetName\": \"{{targetName}}\",\n  \"targetValidations\": \"{{targetValidations}}\",\n  \"cascadeError\": {{cascadeError}},\n  \"payloadEncoding\": \"{{payloadEncoding}}\",\n  \"includePayload\": \"{{includePayload}}\",\n  \"mappingOptions\": \"{{mappingOptions}}\",\n  \"originalMessageName\": \"{{originalMessageName}}\",\n  \"originalMessageValue\": \"{{originalMessageValue}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/v2/transformer",
								"description": "Service for Transforming messages from Source Format to Target Format.\n\nThis service requires input in the JSON/XML format and returns the transformation result in the JSON/XML format.\n\nContent-Type Header must be set as application/json in the request, if the input is in JSON format. Otherwise, it must be set as application/xml. "
							},
							"response": [
								{
									"id": "763cfb51-9a0e-439a-8e19-a4d72d33fa4c",
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"message\": \"<string>\",\n  \"sourceFormat\": \"<string>\",\n  \"sourceVersion\": \"<string>\",\n  \"targetFormat\": \"<string>\",\n  \"targetVersion\": \"<string>\",\n  \"sourceName\": \"<string>\",\n  \"sourceValidations\": \"<string>\",\n  \"targetName\": \"<string>\",\n  \"targetValidations\": \"<string>\",\n  \"cascadeError\": \"<boolean>\",\n  \"payloadEncoding\": \"<string>\",\n  \"includePayload\": \"<string>\",\n  \"mappingOptions\": \"<string>\",\n  \"originalMessageName\": \"<string>\",\n  \"originalMessageValue\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/v2/transformer"
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
								},
								{
									"id": "a0729491-9e9f-421f-91bb-fd2ae4135a36",
									"name": "Bad Request",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"message\": \"<string>\",\n  \"sourceFormat\": \"<string>\",\n  \"sourceVersion\": \"<string>\",\n  \"targetFormat\": \"<string>\",\n  \"targetVersion\": \"<string>\",\n  \"sourceName\": \"<string>\",\n  \"sourceValidations\": \"<string>\",\n  \"targetName\": \"<string>\",\n  \"targetValidations\": \"<string>\",\n  \"cascadeError\": \"<boolean>\",\n  \"payloadEncoding\": \"<string>\",\n  \"includePayload\": \"<string>\",\n  \"mappingOptions\": \"<string>\",\n  \"originalMessageName\": \"<string>\",\n  \"originalMessageValue\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/v2/transformer"
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
								},
								{
									"id": "c1e29a98-5574-435f-9d60-76281b7c8a7f",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"message\": \"<string>\",\n  \"sourceFormat\": \"<string>\",\n  \"sourceVersion\": \"<string>\",\n  \"targetFormat\": \"<string>\",\n  \"targetVersion\": \"<string>\",\n  \"sourceName\": \"<string>\",\n  \"sourceValidations\": \"<string>\",\n  \"targetName\": \"<string>\",\n  \"targetValidations\": \"<string>\",\n  \"cascadeError\": \"<boolean>\",\n  \"payloadEncoding\": \"<string>\",\n  \"includePayload\": \"<string>\",\n  \"mappingOptions\": \"<string>\",\n  \"originalMessageName\": \"<string>\",\n  \"originalMessageValue\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/v2/transformer"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"messageId\": \"<string>\",\n  \"sourceFormat\": \"<string>\",\n  \"sourceVersion\": \"<string>\",\n  \"sourceName\": \"<string>\",\n  \"targetFormat\": \"<string>\",\n  \"targetVersion\": \"<string>\",\n  \"targetName\": \"<string>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\",\n      \"line\": \"<integer>\",\n      \"column\": \"<integer>\",\n      \"fieldId\": \"<string>\",\n      \"validation\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\",\n      \"line\": \"<integer>\",\n      \"column\": \"<integer>\",\n      \"fieldId\": \"<string>\",\n      \"validation\": \"<string>\"\n    }\n  ],\n  \"output\": \"<string>\",\n  \"parsedPayload\": \"<string>\"\n}"
								},
								{
									"id": "ee87b69b-f078-4def-8f84-9cf4c7439efe",
									"name": "Unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"message\": \"<string>\",\n  \"sourceFormat\": \"<string>\",\n  \"sourceVersion\": \"<string>\",\n  \"targetFormat\": \"<string>\",\n  \"targetVersion\": \"<string>\",\n  \"sourceName\": \"<string>\",\n  \"sourceValidations\": \"<string>\",\n  \"targetName\": \"<string>\",\n  \"targetValidations\": \"<string>\",\n  \"cascadeError\": \"<boolean>\",\n  \"payloadEncoding\": \"<string>\",\n  \"includePayload\": \"<string>\",\n  \"mappingOptions\": \"<string>\",\n  \"originalMessageName\": \"<string>\",\n  \"originalMessageValue\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/v2/transformer"
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Transformer Catalog",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2f454a03-6b45-4ec9-bf21-40fdb81773fb",
										"exec": [
											"pm.test(\"Status validated successfully and got \"+pm.response.code, function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,400,401,500])\r",
											"});\r",
											"\r",
											"const responseJson=pm.response.json();\r",
											"\r",
											"if (pm.response.code==200){      \r",
											"    const schema={\r",
											"        \"catalog\":{\r",
											"            \"type\":\"array\",\r",
											"            \"properties\":{\r",
											"                \"sourceFormat\":{\r",
											"                    \"type\":\"string\"\r",
											"                },\r",
											"                \"sourceVersion\":{\r",
											"                    \"type\":\"string\"\r",
											"                },\r",
											"                \"sourceName\":{\r",
											"                    \"type\":\"string\"\r",
											"                },\r",
											"                \"sourceDetailedName\":{\r",
											"                    \"type\":\"string\"\r",
											"                },\r",
											"                \"sourceDescription\":{\r",
											"                    \"type\":\"string\"\r",
											"                },\r",
											"                \"sourceValidations\":{\r",
											"                    \"type\":\"array\",\r",
											"                    \"properties\":{\r",
											"                        \"name\":{\r",
											"                            \"type\":\"String\"\r",
											"                        },\r",
											"                        \"description\":{\r",
											"                            \"type\":\"String\"\r",
											"                        }\r",
											"                    },\r",
											"                    \"required\":[\r",
											"                        \"name\",\r",
											"\t\t\t\t\t\t\"description\"\r",
											"                    ]\r",
											"                },\r",
											"\t\t\t\t\"targetFormat\":{\r",
											"                    \"type\":\"string\"\r",
											"                },\r",
											"                \"targetVersion\":{\r",
											"                    \"type\":\"string\"\r",
											"                },\r",
											"                \"targetName\":{\r",
											"                    \"type\":\"string\"\r",
											"                },\r",
											"                \"targetDetailedName\":{\r",
											"                    \"type\":\"string\"\r",
											"                },\r",
											"                \"targetDescription\":{\r",
											"                    \"type\":\"string\"\r",
											"                },\r",
											"                \"targetValidations\":{\r",
											"                    \"type\":\"array\",\r",
											"                    \"properties\":{\r",
											"                        \"name\":{\r",
											"                            \"type\":\"String\"\r",
											"                        },\r",
											"                        \"description\":{\r",
											"                            \"type\":\"String\"\r",
											"                        }\r",
											"                    },\r",
											"                    \"required\":[\r",
											"                        \"name\"\r",
											"                    ]\r",
											"                },\r",
											"                \"required\":[\r",
											"                    \"sourceFormat\",\r",
											"                    \"sourceVersion\",\r",
											"                    \"sourceName\",\r",
											"                    \"targetFormat\",\r",
											"                    \"targetVersion\",\r",
											"                    \"targetName\"\r",
											"                ]\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"    pm.test(\"schema test passed\", function(){\r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"    })\r",
											"}else if(pm.response.code==401){\r",
											"    //Following test cases will be executed only if status code was 200\r",
											"    //Below test case validates the success flag value equals to \"false\" or not\r",
											"    pm.test(\"Code should be \\\"HTTP-401\\\"\", function(){\r",
											"        pm.expect(responseJson.errors[0].code).to.eqls(\"HTTP-401\");\r",
											"    });\r",
											"    pm.test(\"success should be \\\"false\\\"\", function(){\r",
											"        pm.expect(responseJson.success).to.eqls(false);\r",
											"    });\r",
											"    pm.test(\"Message matched successfully\",function(){\r",
											"        pm.expect(responseJson.errors[0].message).to.eqls(\"Unauthorized. Authentication failure\");\r",
											"    })\r",
											"    pm.test(\"Severity should be \\\"error\\\"\", function(){\r",
											"        pm.expect(responseJson.errors[0].severity).to.eqls(\"error\");\r",
											"    });\r",
											"    //Below test case validates the severity matches with allowed values\r",
											"    pm.test(\"Error severity matches with expected values\", function () {\r",
											"        pm.expect(responseJson.errors[0].severity).to.be.oneOf([\"fatal\",\"error\",\"warn\"])\r",
											"    });\r",
											"    //Below tescase validates the schema/ Data type of the response fields\r",
											"    pm.test(\"Schema type verification for status code 401\", function(){\r",
											"        pm.expect(responseJson.success).to.be.a(\"Boolean\");\r",
											"        pm.expect(responseJson.errors).to.be.a(\"Array\");\r",
											"        pm.expect(responseJson.errors[0].code).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].message).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].severity).to.be.a(\"String\");\r",
											"    })\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "a305178a-4049-4fb4-b299-aba080a92dec",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"disabled": true
									}
								],
								"url": "{{baseUrl}}/v2/transformer/catalog",
								"description": "Returns list of available mappings for transformation."
							},
							"response": [
								{
									"id": "81683ac2-fa06-4293-8bb7-ff829159ac6e",
									"name": "Not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/v2/transformer/catalog"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": ""
								},
								{
									"id": "9010b1e1-8111-4bcd-bb8c-19045c4f555c",
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/v2/transformer/catalog"
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
								},
								{
									"id": "bc27f4c7-9ef8-4f77-b031-28262b021546",
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/v2/transformer/catalog"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"catalog\": [\n    {\n      \"sourceFormat\": \"<string>\",\n      \"sourceVersion\": \"<string>\",\n      \"sourceName\": \"<string>\",\n      \"targetFormat\": \"<string>\",\n      \"targetVersion\": \"<string>\",\n      \"targetName\": \"<string>\",\n      \"sourceDetailedName\": \"<string>\",\n      \"sourceDescription\": \"<string>\",\n      \"sourceValidations\": [\n        {\n          \"name\": \"<string>\",\n          \"description\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"description\": \"<string>\"\n        }\n      ],\n      \"targetDetailedName\": \"<string>\",\n      \"targetDescription\": \"<string>\",\n      \"targetValidations\": [\n        {\n          \"name\": \"<string>\",\n          \"description\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"description\": \"<string>\"\n        }\n      ]\n    },\n    {\n      \"sourceFormat\": \"<string>\",\n      \"sourceVersion\": \"<string>\",\n      \"sourceName\": \"<string>\",\n      \"targetFormat\": \"<string>\",\n      \"targetVersion\": \"<string>\",\n      \"targetName\": \"<string>\",\n      \"sourceDetailedName\": \"<string>\",\n      \"sourceDescription\": \"<string>\",\n      \"sourceValidations\": [\n        {\n          \"name\": \"<string>\",\n          \"description\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"description\": \"<string>\"\n        }\n      ],\n      \"targetDetailedName\": \"<string>\",\n      \"targetDescription\": \"<string>\",\n      \"targetValidations\": [\n        {\n          \"name\": \"<string>\",\n          \"description\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"description\": \"<string>\"\n        }\n      ]\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Transformer Raw",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0d4b85d-a533-4c22-9d60-dab057c678a2",
										"exec": [
											"pm.test(\"Status validated successfully and got \"+pm.response.code, function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,500,401])\r",
											"});\r",
											"\r",
											"const responseJson=pm.response.json();\r",
											"let keys=Object.keys(responseJson);\r",
											"if (pm.response.code==200){\r",
											"    if(responseJson.success==true){\r",
											"        const schema={\r",
											"            \"success\":{\r",
											"                \"type\":\"Boolean\"\r",
											"            },\r",
											"            \"messageId\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"sourceFormat\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"\t\t\t\"sourceVersion\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"sourceName\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"\t\t\t\"targetFormat\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"targetVersion\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"\t\t\t\"targetName\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"output\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"\t\t\t\"parsedPayload\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"required\":[\r",
											"                \"success\",\r",
											"                \"messageId\"\r",
											"            ]\r",
											"           // \"additionalProperties\":false\r",
											"        };\r",
											"        pm.test(\"schema test passed\", function(){\r",
											"            pm.response.to.have.jsonSchema(schema);\r",
											"        });\r",
											"        /*pm.test(\"success should be \\\"true\\\"\", function(){\r",
											"            pm.expect(responseJson.success).to.eqls(true);\r",
											"        });\r",
											"        pm.test(\"Message ID was mandatory\",function(){\r",
											"            pm.expect(keys).to.include(\"messageId\")\r",
											"        })*/\r",
											"    }else {\r",
											"        const schema={\r",
											"            \"success\":{\r",
											"                \"type\":\"Boolean\"\r",
											"            },\r",
											"            \"messageId\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"errors\":{\r",
											"                \"type\":\"Object\",\r",
											"                \"items\":{\r",
											"                    \"type\":\"array\",\r",
											"                    \"properties\":{\r",
											"                        \"code\":{\r",
											"                            \"type\":\"String\"\r",
											"                        },\r",
											"                        \"message\":{\r",
											"                            \"type\":\"String\"\r",
											"                        },\r",
											"                        \"severity\":{\r",
											"                            \"type\":\"String\"\r",
											"                        },\r",
											"                        \"line\":{\r",
											"                            \"type\":\"integer\"\r",
											"                        },\r",
											"                        \"column\":{\r",
											"                            \"type\":\"integer\"\r",
											"                        },\r",
											"                        \"fieldId\":{\r",
											"                            \"type\":\"string\"\r",
											"                        },\r",
											"                        \"validation\":{\r",
											"                            \"type\":\"string\"\r",
											"                        }\r",
											"                    }\r",
											"                },\r",
											"                \"required\":[\r",
											"                    \"code\",\r",
											"                    \"message\",\r",
											"                    \"severity\"\r",
											"                ]\r",
											"            },\r",
											"            \"output\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"required\":[\r",
											"                \"success\",\r",
											"                \"messageId\"\r",
											"            ]\r",
											"           // \"additionalProperties\":false\r",
											"        };\r",
											"        pm.test(\"schema test passed\", function(){\r",
											"            pm.response.to.have.jsonSchema(schema);\r",
											"        })\r",
											"        pm.test(\"success should be \\\"false\\\"\", function(){\r",
											"            pm.expect(responseJson.success).to.eqls(false);\r",
											"        });\r",
											"        pm.test(\"Message ID was mandatory\",function(){\r",
											"            pm.expect(keys).to.include(\"messageId\")\r",
											"        })\r",
											"        pm.test(\"Check for errors, its mandatory\",function(){\r",
											"            pm.expect(keys).to.include(\"errors\")\r",
											"        })\r",
											"        pm.test(\"check for output\",function(){\r",
											"            pm.expect(keys).to.include(\"output\")\r",
											"            pm.expect(responseJson.output).to.be.a(\"String\")\r",
											"        })\r",
											"    }\r",
											"\r",
											"}else if (pm.response.code ==401){\r",
											"    pm.test(\"Code should be \\\"HTTP-401\\\"\", function(){\r",
											"        pm.expect(responseJson.errors[0].code).to.eqls(\"HTTP-401\");\r",
											"    });\r",
											"    pm.test(\"success should be \\\"false\\\"\", function(){\r",
											"        pm.expect(responseJson.success).to.eqls(false);\r",
											"    });\r",
											"    pm.test(\"Message matched successfully\",function(){\r",
											"        pm.expect(responseJson.errors[0].message).to.eqls(\"Unauthorized. Authentication failure\");\r",
											"    })\r",
											"    pm.test(\"Severity should be \\\"error\\\"\", function(){\r",
											"        pm.expect(responseJson.errors[0].severity).to.eqls(\"error\");\r",
											"    });\r",
											"    pm.test(\"Schema type verification for status code 401 succeed\", function(){\r",
											"        pm.expect(responseJson.success).to.be.a(\"Boolean\");\r",
											"        pm.expect(responseJson.errors).to.be.a(\"Array\");\r",
											"        pm.expect(responseJson.errors[0].code).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].message).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].severity).to.be.a(\"String\");\r",
											"    })\r",
											"}else{\r",
											"    // considering default status code as 500 for this request\r",
											"    pm.test(\"success should be \\\"false\\\"\", function(){\r",
											"        pm.expect(responseJson.success).to.eqls(false);\r",
											"    });\r",
											"    pm.test(\"Schema type verification for status code 500 succeed\", function(){\r",
											"        pm.expect(responseJson.success).to.be.a(\"Boolean\");\r",
											"        pm.expect(responseJson.errors).to.be.a(\"Array\");\r",
											"        pm.expect(responseJson.errors[0].code).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].message).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].severity).to.be.a(\"String\");\r",
											"    })\r",
											"\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "1f28f775-2b01-488c-84b3-a1611a04c2ca",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "Name of the original message. Example: MT202COV\n\nTo handle COV Return messages, transformer service requires original or correlation message details.\n\nThe allowed values for originalMessageName will vary for every transformation. Refer respective mapping spec to know more about allowed values.\n\nThis input is only required in case of COV Return Message transformations.\n\nNote: originalMessageName & originalMessageValue must be present together.",
										"key": "originalMessageName",
										"value": "{{originalMessageName}}"
									},
									{
										"description": "Original message value.\n\nTo handle COV Return messages, transformer service requires original or correlation message details.\n\nThis option allows users to specify the original message value for COV Return message transformation.\n\nIf payloadEncoding is set to Base64, then originalMessageValue needs to be in Base64 format.\n\nNote: originalMessageName & originalMessageValue must be present together.",
										"key": "originalMessageValue",
										"value": "{{originalMessageValue}}"
									},
									{
										"key": "Content-Type",
										"value": "text/plain",
										"disabled": true
									},
									{
										"key": "Accept",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{message}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v2/transformer/raw?sourceFormat={{sourceFormat}}&sourceVersion={{sourceVersion}}&sourceName={{sourceName}}&sourceValidations={{sourceValidations}}&targetFormat={{targetFormat}}&targetVersion={{targetVersion}}&targetName={{targetName}}&targetValidations={{targetValidations}}&cascadeError={{cascadeError}}&payloadEncoding={{payloadEncoding}}&includePayload={{includePayload}}&mappingOptions={{mappingOptions}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"transformer",
										"raw"
									],
									"query": [
										{
											"key": "sourceFormat",
											"value": "{{sourceFormat}}",
											"description": "(Required) Format of the source message. Example: SWIFT\n\nGet accepted values by calling /v2/transformer/catalog"
										},
										{
											"key": "sourceVersion",
											"value": "{{sourceVersion}}",
											"description": "(Required) Version of the source message. Example: SRG 2021\n\nGet accepted values by calling /v2/transformer/catalog"
										},
										{
											"key": "sourceName",
											"value": "{{sourceName}}",
											"description": "Name of the source message. Example: MT103. This is an optional request parameter. It will be automatically identified based on the input message, if the sourceName is not specified.\n\nGet accepted values by calling /v2/transformer/catalog"
										},
										{
											"key": "sourceValidations",
											"value": "{{sourceValidations}}",
											"description": "Validation nodes which needs to be executed for source message. Value should be in a CSV format. Example: Default,Validation1\n\nGet supported validations from /v2/transformer/catalog\n\nNote: If not present or value is null, the Default Validation node will be executed. If the value is empty String, then the parsed source message object will not be validated."
										},
										{
											"key": "targetFormat",
											"value": "{{targetFormat}}",
											"description": "(Required) Format of the target message. Example: CBPR+\n\nGet accepted values by calling /v2/transformer/catalog"
										},
										{
											"key": "targetVersion",
											"value": "{{targetVersion}}",
											"description": "(Required) Version of the target message. Example: 2.1\n\nGet accepted values by calling /v2/transformer/catalog"
										},
										{
											"key": "targetName",
											"value": "{{targetName}}",
											"description": "Name of the target message. Example: pacs.008.001.08. This is an optional request parameter. It will be automatically identified based on the input message, if the targetName is not specified.\n\nGet accepted values by calling /v2/transformer/catalog"
										},
										{
											"key": "targetValidations",
											"value": "{{targetValidations}}",
											"description": "Validation nodes which needs to be executed for target message. Value should be in a CSV format.  Example: Default,Validation1\n\nGet supported validations from /v2/transformer/catalog\n\nNote: If not present or value is null, the Default Validation node will be executed. If the value is empty String, then the target message object will not be validated."
										},
										{
											"key": "cascadeError",
											"value": "{{cascadeError}}",
											"description": "It supports Boolean value. Default value for cascadeError is false (not present or null).\n\ncascadeError value applies to the legs like Source leg(Parse and Validation of Source Message), Mapping leg(Transformation of Source message to Target message), and Target leg(Validation and Serialization of Target message).\nWithin a leg, errors will always be cascaded.\n\nIf the cascadeError is set to true, then the subsequent legs will be executed even if there are any errors in the current leg. Otherwise, execution will be stopped at the current leg itself.\n\nIf all the errors are of Warn severity in the current leg, then the subsequent legs will be executed irrespective of the cascadeError value.\n\nIrrespective of the cascadeError value, the execution will stop at the mapping leg, only if any mapping exceptions occurred with severity ERROR or Higher. Reason : In case of mapping errors the target object will be partially constructed and hence proceeding to the next step is not viable."
										},
										{
											"key": "payloadEncoding",
											"value": "{{payloadEncoding}}",
											"description": "Encoding type of the input parameters message, originalMessageValue and transformed output message. This is an optional field. Accepted Values are: Base64\n\nNote: In case of unsupported value, input is treated as plain text."
										},
										{
											"key": "includePayload",
											"value": "{{includePayload}}",
											"description": "Option to include the parsed message as JSON in the response. \nAccepted Values are: Always, Never and OnError.\nDefault value is Never. \n\nNote: Default value will be used, if this parameter is not present."
										},
										{
											"key": "mappingOptions",
											"value": "{{mappingOptions}}",
											"description": "Option to include comma separated key value pair to control the transformation. Key and Value are case-sensitive.\n\nPattern : <key:value>,<key:value> \n\nExample : ApplicationMode:I,MessagePriority:U"
										}
									]
								},
								"description": "Service for Transforming messages from Source Format to Target Format.\n\nThis service requires the raw message (string) as input in the body and returns the transformation result in the JSON/XML format."
							},
							"response": [
								{
									"id": "3e12b1f2-c8b4-403b-9147-d6d916241205",
									"name": "Unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Name of the original message. Example: MT202COV\n\nTo handle COV Return messages, transformer service requires original or correlation message details.\n\nThe allowed values for originalMessageName will vary for every transformation. Refer respective mapping spec to know more about allowed values.\n\nThis input is only required in case of COV Return Message transformations.\n\nNote: originalMessageName & originalMessageValue must be present together.",
												"key": "originalMessageName",
												"value": "<string>"
											},
											{
												"description": "Original message value.\n\nTo handle COV Return messages, transformer service requires original or correlation message details.\n\nThis option allows users to specify the original message value for COV Return message transformation.\n\nIf payloadEncoding is set to Base64, then originalMessageValue needs to be in Base64 format.\n\nNote: originalMessageName & originalMessageValue must be present together.",
												"key": "originalMessageValue",
												"value": "<string>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\"<string>\""
										},
										"url": {
											"raw": "{{baseUrl}}/v2/transformer/raw?sourceFormat=<string>&sourceVersion=<string>&sourceName=<string>&sourceValidations=<string>&targetFormat=<string>&targetVersion=<string>&targetName=<string>&targetValidations=<string>&cascadeError=<boolean>&payloadEncoding=<string>&includePayload=<string>&mappingOptions=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"transformer",
												"raw"
											],
											"query": [
												{
													"key": "sourceFormat",
													"value": "<string>"
												},
												{
													"key": "sourceVersion",
													"value": "<string>"
												},
												{
													"key": "sourceName",
													"value": "<string>"
												},
												{
													"key": "sourceValidations",
													"value": "<string>"
												},
												{
													"key": "targetFormat",
													"value": "<string>"
												},
												{
													"key": "targetVersion",
													"value": "<string>"
												},
												{
													"key": "targetName",
													"value": "<string>"
												},
												{
													"key": "targetValidations",
													"value": "<string>"
												},
												{
													"key": "cascadeError",
													"value": "<boolean>"
												},
												{
													"key": "payloadEncoding",
													"value": "<string>"
												},
												{
													"key": "includePayload",
													"value": "<string>"
												},
												{
													"key": "mappingOptions",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
								},
								{
									"id": "72de3438-4e46-4ed7-85c7-506140debbf2",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Name of the original message. Example: MT202COV\n\nTo handle COV Return messages, transformer service requires original or correlation message details.\n\nThe allowed values for originalMessageName will vary for every transformation. Refer respective mapping spec to know more about allowed values.\n\nThis input is only required in case of COV Return Message transformations.\n\nNote: originalMessageName & originalMessageValue must be present together.",
												"key": "originalMessageName",
												"value": "<string>"
											},
											{
												"description": "Original message value.\n\nTo handle COV Return messages, transformer service requires original or correlation message details.\n\nThis option allows users to specify the original message value for COV Return message transformation.\n\nIf payloadEncoding is set to Base64, then originalMessageValue needs to be in Base64 format.\n\nNote: originalMessageName & originalMessageValue must be present together.",
												"key": "originalMessageValue",
												"value": "<string>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\"<string>\""
										},
										"url": {
											"raw": "{{baseUrl}}/v2/transformer/raw?sourceFormat=<string>&sourceVersion=<string>&sourceName=<string>&sourceValidations=<string>&targetFormat=<string>&targetVersion=<string>&targetName=<string>&targetValidations=<string>&cascadeError=<boolean>&payloadEncoding=<string>&includePayload=<string>&mappingOptions=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"transformer",
												"raw"
											],
											"query": [
												{
													"key": "sourceFormat",
													"value": "<string>"
												},
												{
													"key": "sourceVersion",
													"value": "<string>"
												},
												{
													"key": "sourceName",
													"value": "<string>"
												},
												{
													"key": "sourceValidations",
													"value": "<string>"
												},
												{
													"key": "targetFormat",
													"value": "<string>"
												},
												{
													"key": "targetVersion",
													"value": "<string>"
												},
												{
													"key": "targetName",
													"value": "<string>"
												},
												{
													"key": "targetValidations",
													"value": "<string>"
												},
												{
													"key": "cascadeError",
													"value": "<boolean>"
												},
												{
													"key": "payloadEncoding",
													"value": "<string>"
												},
												{
													"key": "includePayload",
													"value": "<string>"
												},
												{
													"key": "mappingOptions",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"messageId\": \"<string>\",\n  \"sourceFormat\": \"<string>\",\n  \"sourceVersion\": \"<string>\",\n  \"sourceName\": \"<string>\",\n  \"targetFormat\": \"<string>\",\n  \"targetVersion\": \"<string>\",\n  \"targetName\": \"<string>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\",\n      \"line\": \"<integer>\",\n      \"column\": \"<integer>\",\n      \"fieldId\": \"<string>\",\n      \"validation\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\",\n      \"line\": \"<integer>\",\n      \"column\": \"<integer>\",\n      \"fieldId\": \"<string>\",\n      \"validation\": \"<string>\"\n    }\n  ],\n  \"output\": \"<string>\",\n  \"parsedPayload\": \"<string>\"\n}"
								},
								{
									"id": "8afb9063-a0c1-489f-9f25-3b166d8f1a61",
									"name": "Bad Request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Name of the original message. Example: MT202COV\n\nTo handle COV Return messages, transformer service requires original or correlation message details.\n\nThe allowed values for originalMessageName will vary for every transformation. Refer respective mapping spec to know more about allowed values.\n\nThis input is only required in case of COV Return Message transformations.\n\nNote: originalMessageName & originalMessageValue must be present together.",
												"key": "originalMessageName",
												"value": "<string>"
											},
											{
												"description": "Original message value.\n\nTo handle COV Return messages, transformer service requires original or correlation message details.\n\nThis option allows users to specify the original message value for COV Return message transformation.\n\nIf payloadEncoding is set to Base64, then originalMessageValue needs to be in Base64 format.\n\nNote: originalMessageName & originalMessageValue must be present together.",
												"key": "originalMessageValue",
												"value": "<string>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\"<string>\""
										},
										"url": {
											"raw": "{{baseUrl}}/v2/transformer/raw?sourceFormat=<string>&sourceVersion=<string>&sourceName=<string>&sourceValidations=<string>&targetFormat=<string>&targetVersion=<string>&targetName=<string>&targetValidations=<string>&cascadeError=<boolean>&payloadEncoding=<string>&includePayload=<string>&mappingOptions=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"transformer",
												"raw"
											],
											"query": [
												{
													"key": "sourceFormat",
													"value": "<string>"
												},
												{
													"key": "sourceVersion",
													"value": "<string>"
												},
												{
													"key": "sourceName",
													"value": "<string>"
												},
												{
													"key": "sourceValidations",
													"value": "<string>"
												},
												{
													"key": "targetFormat",
													"value": "<string>"
												},
												{
													"key": "targetVersion",
													"value": "<string>"
												},
												{
													"key": "targetName",
													"value": "<string>"
												},
												{
													"key": "targetValidations",
													"value": "<string>"
												},
												{
													"key": "cascadeError",
													"value": "<boolean>"
												},
												{
													"key": "payloadEncoding",
													"value": "<string>"
												},
												{
													"key": "includePayload",
													"value": "<string>"
												},
												{
													"key": "mappingOptions",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
								},
								{
									"id": "8b272143-e3c9-44c8-bdc1-d5a5fbcbd04a",
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Name of the original message. Example: MT202COV\n\nTo handle COV Return messages, transformer service requires original or correlation message details.\n\nThe allowed values for originalMessageName will vary for every transformation. Refer respective mapping spec to know more about allowed values.\n\nThis input is only required in case of COV Return Message transformations.\n\nNote: originalMessageName & originalMessageValue must be present together.",
												"key": "originalMessageName",
												"value": "<string>"
											},
											{
												"description": "Original message value.\n\nTo handle COV Return messages, transformer service requires original or correlation message details.\n\nThis option allows users to specify the original message value for COV Return message transformation.\n\nIf payloadEncoding is set to Base64, then originalMessageValue needs to be in Base64 format.\n\nNote: originalMessageName & originalMessageValue must be present together.",
												"key": "originalMessageValue",
												"value": "<string>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\"<string>\""
										},
										"url": {
											"raw": "{{baseUrl}}/v2/transformer/raw?sourceFormat=<string>&sourceVersion=<string>&sourceName=<string>&sourceValidations=<string>&targetFormat=<string>&targetVersion=<string>&targetName=<string>&targetValidations=<string>&cascadeError=<boolean>&payloadEncoding=<string>&includePayload=<string>&mappingOptions=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"transformer",
												"raw"
											],
											"query": [
												{
													"key": "sourceFormat",
													"value": "<string>"
												},
												{
													"key": "sourceVersion",
													"value": "<string>"
												},
												{
													"key": "sourceName",
													"value": "<string>"
												},
												{
													"key": "sourceValidations",
													"value": "<string>"
												},
												{
													"key": "targetFormat",
													"value": "<string>"
												},
												{
													"key": "targetVersion",
													"value": "<string>"
												},
												{
													"key": "targetName",
													"value": "<string>"
												},
												{
													"key": "targetValidations",
													"value": "<string>"
												},
												{
													"key": "cascadeError",
													"value": "<boolean>"
												},
												{
													"key": "payloadEncoding",
													"value": "<string>"
												},
												{
													"key": "includePayload",
													"value": "<string>"
												},
												{
													"key": "mappingOptions",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						}
					],
					"_postman_id": "2de934ad-6894-4bf4-bcc4-c35efe4a60c8",
					"_postman_isSubFolder": true
				},
				{
					"name": "validator",
					"item": [
						{
							"name": "Validator JSON Enveloped",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c54cf5f7-9c68-487a-90b3-97dfe0997011",
										"exec": [
											"pm.test(\"Status validated successfully and got \"+pm.response.code, function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,500,401])\r",
											"});\r",
											"\r",
											"const responseJson=pm.response.json();\r",
											"let keys=Object.keys(responseJson);\r",
											"if (pm.response.code==200){\r",
											"    if(responseJson.success==true){\r",
											"        const schema={\r",
											"            \"success\":{\r",
											"                \"type\":\"Boolean\"\r",
											"            },\r",
											"            \"messageId\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"\t\t\t\"parsedPayload\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"required\":[\r",
											"                \"success\",\r",
											"                \"messageId\"\r",
											"            ]\r",
											"        };\r",
											"        pm.test(\"schema test passed\", function(){\r",
											"            pm.response.to.have.jsonSchema(schema);\r",
											"\t\t});\r",
											"    }else {\r",
											"        const schema={\r",
											"            \"success\":{\r",
											"                \"type\":\"Boolean\"\r",
											"            },\r",
											"            \"messageId\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"errors\":{\r",
											"                \"type\":\"Object\",\r",
											"                \"items\":{\r",
											"                    \"type\":\"array\",\r",
											"                    \"properties\":{\r",
											"                        \"code\":{\r",
											"                            \"type\":\"String\"\r",
											"                        },\r",
											"                        \"message\":{\r",
											"                            \"type\":\"String\"\r",
											"                        },\r",
											"                        \"severity\":{\r",
											"                            \"type\":\"String\"\r",
											"                        },\r",
											"                        \"line\":{\r",
											"                            \"type\":\"integer\"\r",
											"                        },\r",
											"                        \"column\":{\r",
											"                            \"type\":\"integer\"\r",
											"                        },\r",
											"                        \"fieldId\":{\r",
											"                            \"type\":\"string\"\r",
											"                        },\r",
											"                        \"validation\":{\r",
											"                            \"type\":\"string\"\r",
											"                        }\r",
											"                    }\r",
											"                },\r",
											"                \"required\":[\r",
											"                    \"code\",\r",
											"                    \"message\",\r",
											"                    \"severity\"\r",
											"                ]\r",
											"            },\r",
											"            \"required\":[\r",
											"                \"success\",\r",
											"                \"messageId\",\r",
											"\t\t\t\t\"errors\"\r",
											"            ]\r",
											"        };\r",
											"        pm.test(\"schema test passed\", function(){\r",
											"            pm.response.to.have.jsonSchema(schema);\r",
											"        })\r",
											"        pm.test(\"success should be \\\"false\\\"\", function(){\r",
											"            pm.expect(responseJson.success).to.eqls(false);\r",
											"        });\r",
											"        pm.test(\"Message ID was mandatory\",function(){\r",
											"            pm.expect(keys).to.include(\"messageId\")\r",
											"        })\r",
											"        pm.test(\"Check for errors, its mandatory\",function(){\r",
											"            pm.expect(keys).to.include(\"errors\")\r",
											"        })\r",
											"        \r",
											"    }\r",
											"\r",
											"}else if (pm.response.code ==401){\r",
											"    pm.test(\"Code should be \\\"HTTP-401\\\"\", function(){\r",
											"        pm.expect(responseJson.errors[0].code).to.eqls(\"HTTP-401\");\r",
											"    });\r",
											"    pm.test(\"success should be \\\"false\\\"\", function(){\r",
											"        pm.expect(responseJson.success).to.eqls(false);\r",
											"    });\r",
											"    pm.test(\"Message matched successfully\",function(){\r",
											"        pm.expect(responseJson.errors[0].message).to.eqls(\"Unauthorized. Authentication failure\");\r",
											"    })\r",
											"    pm.test(\"Severity should be \\\"error\\\"\", function(){\r",
											"        pm.expect(responseJson.errors[0].severity).to.eqls(\"error\");\r",
											"    });\r",
											"    pm.test(\"Schema type verification for status code 401 succeed\", function(){\r",
											"        pm.expect(responseJson.success).to.be.a(\"Boolean\");\r",
											"        pm.expect(responseJson.errors).to.be.a(\"Array\");\r",
											"        pm.expect(responseJson.errors[0].code).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].message).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].severity).to.be.a(\"String\");\r",
											"    })\r",
											"}else{\r",
											"    // consiering default status code as 500 for this request\r",
											"    pm.test(\"success should be \\\"false\\\"\", function(){\r",
											"        pm.expect(responseJson.success).to.eqls(false);\r",
											"    });\r",
											"    pm.test(\"Schema type verification for status code 500 succeed\", function(){\r",
											"        pm.expect(responseJson.success).to.be.a(\"Boolean\");\r",
											"        pm.expect(responseJson.errors).to.be.a(\"Array\");\r",
											"        pm.expect(responseJson.errors[0].code).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].message).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].severity).to.be.a(\"String\");\r",
											"    })\r",
											"\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "61baa1e9-a00e-4531-a110-93128242f550",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Accept",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"message\": \"{{message}}\",\n  \"format\": \"{{format}}\",\n  \"version\": \"{{version}}\",\n  \"name\": \"{{name}}\",\n  \"validations\": \"{{validations}}\",\n  \"payloadEncoding\": \"{{payloadEncoding}}\",\n  \"includePayload\": \"{{includePayload}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/v2/validator",
								"description": "Validates the given message. \n\nThis service requires input in the JSON/XML format and returns the validation result in the JSON format.  \n\nContent-Type Header must be set as application/json in the request, if the input is in JSON format. Otherwise, it must be set as application/xml. "
							},
							"response": [
								{
									"id": "22652386-deae-436a-9646-dd702fe7823b",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"message\": \"<string>\",\n  \"format\": \"<string>\",\n  \"version\": \"<string>\",\n  \"name\": \"<string>\",\n  \"validations\": \"<string>\",\n  \"payloadEncoding\": \"<string>\",\n  \"includePayload\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/v2/validator"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"messageId\": \"<string>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\",\n      \"line\": \"<integer>\",\n      \"column\": \"<integer>\",\n      \"fieldId\": \"<string>\",\n      \"validation\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\",\n      \"line\": \"<integer>\",\n      \"column\": \"<integer>\",\n      \"fieldId\": \"<string>\",\n      \"validation\": \"<string>\"\n    }\n  ],\n  \"parsedPayload\": \"<string>\"\n}"
								},
								{
									"id": "538661a9-a533-4243-a5c4-0525349b0b85",
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"message\": \"<string>\",\n  \"format\": \"<string>\",\n  \"version\": \"<string>\",\n  \"name\": \"<string>\",\n  \"validations\": \"<string>\",\n  \"payloadEncoding\": \"<string>\",\n  \"includePayload\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/v2/validator"
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
								},
								{
									"id": "5ceb2e8e-134a-4fcc-8b4c-70fe6c682e46",
									"name": "Unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"message\": \"<string>\",\n  \"format\": \"<string>\",\n  \"version\": \"<string>\",\n  \"name\": \"<string>\",\n  \"validations\": \"<string>\",\n  \"payloadEncoding\": \"<string>\",\n  \"includePayload\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/v2/validator"
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
								},
								{
									"id": "a745e326-7260-4a53-938b-abde083dff0b",
									"name": "Bad Request",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"message\": \"<string>\",\n  \"format\": \"<string>\",\n  \"version\": \"<string>\",\n  \"name\": \"<string>\",\n  \"validations\": \"<string>\",\n  \"payloadEncoding\": \"<string>\",\n  \"includePayload\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/v2/validator"
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Validator XML Enveloped",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c54cf5f7-9c68-487a-90b3-97dfe0997011",
										"exec": [
											"pm.test(\"Status validated successfully and got \"+pm.response.code, function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,500,401])\r",
											"});\r",
											"\r",
											"//const responseJson=pm.response.toJSON;\r",
											"const responseJson=pm.response.json;\r",
											"let keys=Object.keys(responseJson);\r",
											"if (pm.response.code==200){\r",
											"    if(responseJson.success==true){\r",
											"        const schema={\r",
											"            \"success\":{\r",
											"                \"type\":\"Boolean\"\r",
											"            },\r",
											"            \"messageId\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"\t\t\t\"parsedPayload\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"required\":[\r",
											"                \"success\",\r",
											"                \"messageId\"\r",
											"            ]\r",
											"        };\r",
											"        pm.test(\"schema test passed\", function(){\r",
											"            pm.response.to.have.jsonSchema(schema);\r",
											"\t\t});\r",
											"    }else {\r",
											"        const schema={\r",
											"            \"success\":{\r",
											"                \"type\":\"Boolean\"\r",
											"            },\r",
											"            \"messageId\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"errors\":{\r",
											"                \"type\":\"Object\",\r",
											"                \"items\":{\r",
											"                    \"type\":\"array\",\r",
											"                    \"properties\":{\r",
											"                        \"code\":{\r",
											"                            \"type\":\"String\"\r",
											"                        },\r",
											"                        \"message\":{\r",
											"                            \"type\":\"String\"\r",
											"                        },\r",
											"                        \"severity\":{\r",
											"                            \"type\":\"String\"\r",
											"                        },\r",
											"                        \"line\":{\r",
											"                            \"type\":\"integer\"\r",
											"                        },\r",
											"                        \"column\":{\r",
											"                            \"type\":\"integer\"\r",
											"                        },\r",
											"                        \"fieldId\":{\r",
											"                            \"type\":\"string\"\r",
											"                        },\r",
											"                        \"validation\":{\r",
											"                            \"type\":\"string\"\r",
											"                        }\r",
											"                    }\r",
											"                },\r",
											"                \"required\":[\r",
											"                    \"code\",\r",
											"                    \"message\",\r",
											"                    \"severity\"\r",
											"                ]\r",
											"            },\r",
											"            \"required\":[\r",
											"                \"success\",\r",
											"                \"messageId\",\r",
											"\t\t\t\t\"errors\"\r",
											"            ]\r",
											"        };\r",
											"        pm.test(\"schema test passed\", function(){\r",
											"            pm.response.to.have.jsonSchema(schema);\r",
											"        })\r",
											"        pm.test(\"success should be \\\"false\\\"\", function(){\r",
											"            pm.expect(responseJson.success).to.eqls(false);\r",
											"        });\r",
											"        pm.test(\"Message ID was mandatory\",function(){\r",
											"            pm.expect(keys).to.include(\"messageId\")\r",
											"        })\r",
											"        pm.test(\"Check for errors, its mandatory\",function(){\r",
											"            pm.expect(keys).to.include(\"errors\")\r",
											"        })\r",
											"        \r",
											"    }\r",
											"\r",
											"}else if (pm.response.code ==401){\r",
											"    pm.test(\"Code should be \\\"HTTP-401\\\"\", function(){\r",
											"        pm.expect(responseJson.errors[0].code).to.eqls(\"HTTP-401\");\r",
											"    });\r",
											"    pm.test(\"success should be \\\"false\\\"\", function(){\r",
											"        pm.expect(responseJson.success).to.eqls(false);\r",
											"    });\r",
											"    pm.test(\"Message matched successfully\",function(){\r",
											"        pm.expect(responseJson.errors[0].message).to.eqls(\"Unauthorized. Authentication failure\");\r",
											"    })\r",
											"    pm.test(\"Severity should be \\\"error\\\"\", function(){\r",
											"        pm.expect(responseJson.errors[0].severity).to.eqls(\"error\");\r",
											"    });\r",
											"    pm.test(\"Schema type verification for status code 401 succeed\", function(){\r",
											"        pm.expect(responseJson.success).to.be.a(\"Boolean\");\r",
											"        pm.expect(responseJson.errors).to.be.a(\"Array\");\r",
											"        pm.expect(responseJson.errors[0].code).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].message).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].severity).to.be.a(\"String\");\r",
											"    })\r",
											"}else{\r",
											"    // consiering default status code as 500 for this request\r",
											"    pm.test(\"success should be \\\"false\\\"\", function(){\r",
											"        pm.expect(responseJson.success).to.eqls(false);\r",
											"    });\r",
											"    pm.test(\"Schema type verification for status code 500 succeed\", function(){\r",
											"        pm.expect(responseJson.success).to.be.a(\"Boolean\");\r",
											"        pm.expect(responseJson.errors).to.be.a(\"Array\");\r",
											"        pm.expect(responseJson.errors[0].code).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].message).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].severity).to.be.a(\"String\");\r",
											"    })\r",
											"\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "d58a9f24-5ecc-4929-baaf-9e088e53f439",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Accept",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<ValidatorRequest>\n    <message><![CDATA[{{message}}]]></message>\n    <format>{{format}}</format>\n    <version>{{version}}</version>\n    <name>{{name}}</name>\n    <validations>{{validations}}</validations>\n    <payloadEncoding>{{payloadEncoding}}</payloadEncoding>\n    <includePayload>{{includePayload}}</includePayload>\n</ValidatorRequest>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": "{{baseUrl}}/v2/validator",
								"description": "Validates the given message. \n\nThis service requires input in the JSON/XML format and returns the validation result in the JSON format.  \n\nContent-Type Header must be set as application/json in the request, if the input is in JSON format. Otherwise, it must be set as application/xml. "
							},
							"response": [
								{
									"id": "1510c9c8-08eb-4129-aeec-aebcd1a0c16c",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"message\": \"<string>\",\n  \"format\": \"<string>\",\n  \"version\": \"<string>\",\n  \"name\": \"<string>\",\n  \"validations\": \"<string>\",\n  \"payloadEncoding\": \"<string>\",\n  \"includePayload\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/v2/validator"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"enabled": true
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"messageId\": \"<string>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\",\n      \"line\": \"<integer>\",\n      \"column\": \"<integer>\",\n      \"fieldId\": \"<string>\",\n      \"validation\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\",\n      \"line\": \"<integer>\",\n      \"column\": \"<integer>\",\n      \"fieldId\": \"<string>\",\n      \"validation\": \"<string>\"\n    }\n  ],\n  \"parsedPayload\": \"<string>\"\n}"
								},
								{
									"id": "3b739488-a958-4b58-a4fb-952d33790705",
									"name": "Bad Request",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"message\": \"<string>\",\n  \"format\": \"<string>\",\n  \"version\": \"<string>\",\n  \"name\": \"<string>\",\n  \"validations\": \"<string>\",\n  \"payloadEncoding\": \"<string>\",\n  \"includePayload\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/v2/validator"
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"enabled": true
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
								},
								{
									"id": "802ca360-a69b-4f8d-a767-4dbe8d417f1f",
									"name": "Unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"message\": \"<string>\",\n  \"format\": \"<string>\",\n  \"version\": \"<string>\",\n  \"name\": \"<string>\",\n  \"validations\": \"<string>\",\n  \"payloadEncoding\": \"<string>\",\n  \"includePayload\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/v2/validator"
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"enabled": true
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
								},
								{
									"id": "b545b427-8857-44b5-918f-e886185ce460",
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"message\": \"<string>\",\n  \"format\": \"<string>\",\n  \"version\": \"<string>\",\n  \"name\": \"<string>\",\n  \"validations\": \"<string>\",\n  \"payloadEncoding\": \"<string>\",\n  \"includePayload\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/v2/validator"
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"enabled": true
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Validator Catalog",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a2ff549-ae2f-49c3-9abf-435a47b934e9",
										"exec": [
											"pm.test(\"Status validated successfully and got \"+pm.response.code, function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,400,401,500])\r",
											"});\r",
											"\r",
											"const responseJson=pm.response.json();\r",
											"\r",
											"if (pm.response.code==200){      \r",
											"    const schema={\r",
											"        \"catalog\":{\r",
											"            \"type\":\"array\",\r",
											"            \"properties\":{\r",
											"                \"format\":{\r",
											"                    \"type\":\"string\"\r",
											"                },\r",
											"                \"version\":{\r",
											"                    \"type\":\"string\"\r",
											"                },\r",
											"                \"category\":{\r",
											"                    \"type\":\"string\"\r",
											"                },\r",
											"                \"name\":{\r",
											"                    \"type\":\"string\"\r",
											"                },\r",
											"                \"detailedName\":{\r",
											"                    \"type\":\"string\"\r",
											"                },\r",
											"                \"description\":{\r",
											"                    \"type\":\"string\"\r",
											"                },\r",
											"                \"validations\":{\r",
											"                    \"type\":\"array\",\r",
											"                    \"properties\":{\r",
											"                        \"name\":{\r",
											"                            \"type\":\"String\"\r",
											"                        },\r",
											"                        \"description\":{\r",
											"                            \"type\":\"String\"\r",
											"                        }\r",
											"                    },\r",
											"                    \"required\":[\r",
											"                        \"name\"\r",
											"                    ]\r",
											"                },\r",
											"                \"required\":[\r",
											"                    \"format\",\r",
											"                    \"version\",\r",
											"                    \"category\",\r",
											"                    \"name\"\r",
											"                ]\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"    pm.test(\"schema test passed\", function(){\r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"    })\r",
											"}else if(pm.response.code==401){\r",
											"    //Following test cases will be executed only if status code was 200\r",
											"    //Below test case validates the success flag value equals to \"false\" or not\r",
											"    pm.test(\"Code should be \\\"HTTP-401\\\"\", function(){\r",
											"        pm.expect(responseJson.errors[0].code).to.eqls(\"HTTP-401\");\r",
											"    });\r",
											"    pm.test(\"success should be \\\"false\\\"\", function(){\r",
											"        pm.expect(responseJson.success).to.eqls(false);\r",
											"    });\r",
											"    pm.test(\"Message matched successfully\",function(){\r",
											"        pm.expect(responseJson.errors[0].message).to.eqls(\"Unauthorized. Authentication failure\");\r",
											"    })\r",
											"    pm.test(\"Severity should be \\\"error\\\"\", function(){\r",
											"        pm.expect(responseJson.errors[0].severity).to.eqls(\"error\");\r",
											"    });\r",
											"    //Below test case validates the severity matches with allowed values\r",
											"    pm.test(\"Error severity matches with expected values\", function () {\r",
											"        pm.expect(responseJson.errors[0].severity).to.be.oneOf([\"fatal\",\"error\",\"warn\"])\r",
											"    });\r",
											"    //Below tescase validates the schema/ Data type of the response fields\r",
											"    pm.test(\"Schema type verification for status code 401\", function(){\r",
											"        pm.expect(responseJson.success).to.be.a(\"Boolean\");\r",
											"        pm.expect(responseJson.errors).to.be.a(\"Array\");\r",
											"        pm.expect(responseJson.errors[0].code).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].message).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].severity).to.be.a(\"String\");\r",
											"    })\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "81bedaa8-1bea-40df-bbfc-6c1a53597448",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"disabled": true
									}
								],
								"url": "{{baseUrl}}/v2/validator/catalog",
								"description": "Returns list of available messages to validate"
							},
							"response": [
								{
									"id": "ab5e23b4-ba5c-481f-a2fa-a3779f237a8e",
									"name": "Not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/v2/validator/catalog"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": ""
								},
								{
									"id": "cb9d5970-e797-435b-b3b7-a9b6232a7d2c",
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/v2/validator/catalog"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"catalog\": [\n    {\n      \"format\": \"<string>\",\n      \"version\": \"<string>\",\n      \"category\": \"<string>\",\n      \"name\": \"<string>\",\n      \"detailedName\": \"<string>\",\n      \"description\": \"<string>\",\n      \"validations\": [\n        {\n          \"name\": \"<string>\",\n          \"description\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"description\": \"<string>\"\n        }\n      ]\n    },\n    {\n      \"format\": \"<string>\",\n      \"version\": \"<string>\",\n      \"category\": \"<string>\",\n      \"name\": \"<string>\",\n      \"detailedName\": \"<string>\",\n      \"description\": \"<string>\",\n      \"validations\": [\n        {\n          \"name\": \"<string>\",\n          \"description\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"description\": \"<string>\"\n        }\n      ]\n    }\n  ]\n}"
								},
								{
									"id": "e5f739d0-898d-4996-b54b-f1ca7359a83b",
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/v2/validator/catalog"
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Validator Raw",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b59f8a34-ff10-4581-8428-20aad947e0e0",
										"exec": [
											"pm.test(\"Status validated successfully and got \"+pm.response.code, function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,500,401])\r",
											"});\r",
											"\r",
											"const responseJson=pm.response.json();\r",
											"let keys=Object.keys(responseJson);\r",
											"if (pm.response.code==200){\r",
											"    if(responseJson.success==true){\r",
											"        const schema={\r",
											"            \"success\":{\r",
											"                \"type\":\"Boolean\"\r",
											"            },\r",
											"            \"messageId\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"\t\t\t\"parsedPayload\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"required\":[\r",
											"                \"success\",\r",
											"                \"messageId\"\r",
											"            ]\r",
											"        };\r",
											"        pm.test(\"schema test\", function(){\r",
											"            pm.response.to.have.jsonSchema(schema);\r",
											"\t\t});\r",
											"    }else {\r",
											"        const schema={\r",
											"            \"success\":{\r",
											"                \"type\":\"Boolean\"\r",
											"            },\r",
											"            \"messageId\":{\r",
											"                \"type\":\"String\"\r",
											"            },\r",
											"            \"errors\":{\r",
											"                \"type\":\"Object\",\r",
											"                \"items\":{\r",
											"                    \"type\":\"array\",\r",
											"                    \"properties\":{\r",
											"                        \"code\":{\r",
											"                            \"type\":\"String\"\r",
											"                        },\r",
											"                        \"message\":{\r",
											"                            \"type\":\"String\"\r",
											"                        },\r",
											"                        \"severity\":{\r",
											"                            \"type\":\"String\"\r",
											"                        },\r",
											"                        \"line\":{\r",
											"                            \"type\":\"integer\"\r",
											"                        },\r",
											"                        \"column\":{\r",
											"                            \"type\":\"integer\"\r",
											"                        },\r",
											"                        \"fieldId\":{\r",
											"                            \"type\":\"string\"\r",
											"                        },\r",
											"                        \"validation\":{\r",
											"                            \"type\":\"string\"\r",
											"                        }\r",
											"                    }\r",
											"                },\r",
											"                \"required\":[\r",
											"                    \"code\",\r",
											"                    \"message\",\r",
											"                    \"severity\"\r",
											"                ]\r",
											"            },\r",
											"            \"required\":[\r",
											"                \"success\",\r",
											"                \"messageId\",\r",
											"\t\t\t\t\"errors\"\r",
											"            ]\r",
											"        };\r",
											"        pm.test(\"schema test\", function(){\r",
											"            pm.response.to.have.jsonSchema(schema);\r",
											"        })\r",
											"        pm.test(\"success should be \\\"false\\\"\", function(){\r",
											"            pm.expect(responseJson.success).to.eqls(false);\r",
											"        });\r",
											"        pm.test(\"Message ID was mandatory\",function(){\r",
											"            pm.expect(keys).to.include(\"messageId\")\r",
											"        })\r",
											"        pm.test(\"Check for errors, its mandatory\",function(){\r",
											"            pm.expect(keys).to.include(\"errors\")\r",
											"        })\r",
											"        \r",
											"    }\r",
											"\r",
											"}else if (pm.response.code ==401){\r",
											"    pm.test(\"Code should be \\\"HTTP-401\\\"\", function(){\r",
											"        pm.expect(responseJson.errors[0].code).to.eqls(\"HTTP-401\");\r",
											"    });\r",
											"    pm.test(\"success should be \\\"false\\\"\", function(){\r",
											"        pm.expect(responseJson.success).to.eqls(false);\r",
											"    });\r",
											"    pm.test(\"Message matched successfully\",function(){\r",
											"        pm.expect(responseJson.errors[0].message).to.eqls(\"Unauthorized. Authentication failure\");\r",
											"    })\r",
											"    pm.test(\"Severity should be \\\"error\\\"\", function(){\r",
											"        pm.expect(responseJson.errors[0].severity).to.eqls(\"error\");\r",
											"    });\r",
											"    pm.test(\"Schema type verification for status code 401 succeed\", function(){\r",
											"        pm.expect(responseJson.success).to.be.a(\"Boolean\");\r",
											"        pm.expect(responseJson.errors).to.be.a(\"Array\");\r",
											"        pm.expect(responseJson.errors[0].code).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].message).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].severity).to.be.a(\"String\");\r",
											"    })\r",
											"}else{\r",
											"    // consiering default status code as 500 for this request\r",
											"    pm.test(\"success should be \\\"false\\\"\", function(){\r",
											"        pm.expect(responseJson.success).to.eqls(false);\r",
											"    });\r",
											"    pm.test(\"Schema type verification for status code 500 succeed\", function(){\r",
											"        pm.expect(responseJson.success).to.be.a(\"Boolean\");\r",
											"        pm.expect(responseJson.errors).to.be.a(\"Array\");\r",
											"        pm.expect(responseJson.errors[0].code).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].message).to.be.a(\"String\");\r",
											"        pm.expect(responseJson.errors[0].severity).to.be.a(\"String\");\r",
											"    })\r",
											"\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "67838347-3b5f-4bf4-a855-1824ae4ba730",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/plain",
										"disabled": true
									},
									{
										"key": "Accept",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{message}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v2/validator/raw?format={{format}}&version={{version}}&name={{name}}&validations={{validations}}&payloadEncoding={{payloadEncoding}}&includePayload={{includePayload}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"validator",
										"raw"
									],
									"query": [
										{
											"key": "format",
											"value": "{{format}}",
											"description": "(Required) Format of the input message. Example: SWIFT\n\nGet accepted values by calling /v2/validator/catalog"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "(Required) Version of the input message. Example: SRG 2021\n\nGet accepted values by calling /v2/validator/catalog"
										},
										{
											"key": "name",
											"value": "{{name}}",
											"description": "(Required) Name of the input message. Example: MT103\n\nGet accepted values by calling /v2/validator/catalog"
										},
										{
											"key": "validations",
											"value": "{{validations}}",
											"description": "Validation nodes which needs to be executed. Value should be in a CSV format. Example: Default,Validation1\n\nGet supported validations from /v2/validator/catalog\n\nNote: If not present or value is null, the Default Validation node will be executed. If the value is empty String, then the parsed message object will not be validated."
										},
										{
											"key": "payloadEncoding",
											"value": "{{payloadEncoding}}",
											"description": "Encoding type of the input message. This is an optional field.\nAccepted Values are: Base64\n\nNote: In case of unsupported value, input is treated as plain text."
										},
										{
											"key": "includePayload",
											"value": "{{includePayload}}",
											"description": "Option to include the parsed message as JSON in the response. \nAccepted Values are: Always, Never and OnError.\nDefault value is Never. \n\nNote: Default value will be used, if this parameter is not present."
										}
									]
								},
								"description": "Validates the given message. \n\nThis service requires the raw message (string) as input in the body and returns the validation result in the JSON/XML format."
							},
							"response": [
								{
									"id": "17c7467b-89ca-40c7-a914-a6644f38d8ed",
									"name": "Bad Request",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\"<string>\""
										},
										"url": {
											"raw": "{{baseUrl}}/v2/validator/raw?format=<string>&version=<string>&name=<string>&validations=<string>&payloadEncoding=<string>&includePayload=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"validator",
												"raw"
											],
											"query": [
												{
													"key": "format",
													"value": "<string>"
												},
												{
													"key": "version",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "validations",
													"value": "<string>"
												},
												{
													"key": "payloadEncoding",
													"value": "<string>"
												},
												{
													"key": "includePayload",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
								},
								{
									"id": "6d6a37db-6a07-445f-ac72-b8cd9d0e3f10",
									"name": "Unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\"<string>\""
										},
										"url": {
											"raw": "{{baseUrl}}/v2/validator/raw?format=<string>&version=<string>&name=<string>&validations=<string>&payloadEncoding=<string>&includePayload=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"validator",
												"raw"
											],
											"query": [
												{
													"key": "format",
													"value": "<string>"
												},
												{
													"key": "version",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "validations",
													"value": "<string>"
												},
												{
													"key": "payloadEncoding",
													"value": "<string>"
												},
												{
													"key": "includePayload",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
								},
								{
									"id": "7f744770-857b-4d4d-8bac-54c47a96cc6a",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\"<string>\""
										},
										"url": {
											"raw": "{{baseUrl}}/v2/validator/raw?format=<string>&version=<string>&name=<string>&validations=<string>&payloadEncoding=<string>&includePayload=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"validator",
												"raw"
											],
											"query": [
												{
													"key": "format",
													"value": "<string>"
												},
												{
													"key": "version",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "validations",
													"value": "<string>"
												},
												{
													"key": "payloadEncoding",
													"value": "<string>"
												},
												{
													"key": "includePayload",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"messageId\": \"<string>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\",\n      \"line\": \"<integer>\",\n      \"column\": \"<integer>\",\n      \"fieldId\": \"<string>\",\n      \"validation\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\",\n      \"line\": \"<integer>\",\n      \"column\": \"<integer>\",\n      \"fieldId\": \"<string>\",\n      \"validation\": \"<string>\"\n    }\n  ],\n  \"parsedPayload\": \"<string>\"\n}"
								},
								{
									"id": "fb8b0172-bd39-4d13-962b-bf54f89b21cb",
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\"<string>\""
										},
										"url": {
											"raw": "{{baseUrl}}/v2/validator/raw?format=<string>&version=<string>&name=<string>&validations=<string>&payloadEncoding=<string>&includePayload=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"validator",
												"raw"
											],
											"query": [
												{
													"key": "format",
													"value": "<string>"
												},
												{
													"key": "version",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "validations",
													"value": "<string>"
												},
												{
													"key": "payloadEncoding",
													"value": "<string>"
												},
												{
													"key": "includePayload",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": [\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    },\n    {\n      \"code\": \"<string>\",\n      \"message\": \"<string>\",\n      \"severity\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						}
					],
					"_postman_id": "4baf4e9e-f4cb-4aa0-8802-830e6c9c3318",
					"_postman_isSubFolder": true
				}
			],
			"_postman_id": "337fa3f7-622b-41d3-80c2-a7e8ef208feb",
			"auth": {
				"type": "bearer",
				"bearer": {
					"token": "{{accessToken}}"
				}
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "92db571e-5942-4500-a465-5e64256ac3ab",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8ce434e7-6022-4ca6-b64c-8171c0e9e02e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "917c54c0-a43a-477f-99d2-d003c06fa8e3",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "b1192b68-fd8d-4d6f-bf58-dd26c0a9d80c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "aeb43988-cd3a-491b-85a9-15a03e3b1c5a",
			"key": "baseUrl",
			"value": "http://localhost:8180/volanteapis/messaging",
			"type": "string"
		},
		{
			"id": "cf3dd9f2-2e0e-4a20-9f79-36c642674fba",
			"key": "accessToken",
			"value": "",
			"type": "string"
		},
		{
			"id": "28dcdc06-7283-42b0-9235-ee2a0a80b4b0",
			"key": "message",
			"value": "",
			"type": "string"
		},
		{
			"id": "473b1f61-b51a-4f77-b569-0735912cbe7d",
			"key": "cascadeError",
			"value": "true",
			"type": "string"
		},
		{
			"id": "c3c83784-17b0-465b-9687-f68f86245c68",
			"key": "includePayload",
			"value": "",
			"type": "string"
		},
		{
			"id": "48a0841a-e62b-4c7d-bdf7-a006cc4b260f",
			"key": "targetValidations",
			"value": "",
			"type": "string"
		},
		{
			"id": "169f8e54-e55b-4b30-8901-827dce923194",
			"key": "targetVersion",
			"value": "",
			"type": "string"
		},
		{
			"id": "f238399b-2e8e-4886-ad2c-4829268239c0",
			"key": "targetFormat",
			"value": "",
			"type": "string"
		},
		{
			"id": "d08d0726-939d-40e1-ad03-bf1f403707fd",
			"key": "sourceValidations",
			"value": "",
			"type": "string"
		},
		{
			"id": "93a6a5e3-c7e0-4cfe-b720-4bf690e1981a",
			"key": "sourceVersion",
			"value": "",
			"type": "string"
		},
		{
			"id": "8a59124d-19f8-48dc-b875-00332c9a5e03",
			"key": "sourceFormat",
			"value": "",
			"type": "string"
		},
		{
			"id": "1ac0f04d-2599-42aa-a68e-e8624a96893c",
			"key": "payloadEncoding",
			"value": "Base64",
			"type": "string"
		},
		{
			"id": "ff3ecec7-7d37-4c7e-aafa-80a2f32949ea",
			"key": "mappingOptions",
			"value": "",
			"type": "string"
		},
		{
			"id": "13d8d4d0-8d13-40c9-be80-f0d262deba3a",
			"key": "Source",
			"value": "",
			"type": "string"
		},
		{
			"id": "5135624c-3c5d-4672-b8cf-7bfc2eb70e3d",
			"key": "targetName",
			"value": "",
			"type": "string"
		},
		{
			"id": "c50475bc-1e95-416e-970d-f2d3539e2b65",
			"key": "sourceName",
			"value": "",
			"type": "string"
		},
		{
			"id": "092ea39d-07b9-4484-b423-3c365817a850",
			"key": "format",
			"value": "",
			"type": "string"
		},
		{
			"id": "58c65776-4409-4eeb-99ba-8e1825805aa7",
			"key": "version",
			"value": "",
			"type": "string"
		},
		{
			"id": "5f063ca8-79cc-428a-9065-2177806dfa1d",
			"key": "name",
			"value": "",
			"type": "string"
		},
		{
			"id": "d82f9476-570a-4a75-97d0-39455c3a4963",
			"key": "validations",
			"value": "",
			"type": "string"
		}
	]
}